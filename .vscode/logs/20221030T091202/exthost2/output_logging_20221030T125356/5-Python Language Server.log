INFO:pygls.server:Starting IO server
INFO:pygls.feature_manager:Registered "textDocument/didOpen" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/didChange" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/didSave" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/didClose" with options "None"
INFO:pygls.feature_manager:Registered "textDocument/hover" with options "None"
INFO:pygls.protocol:Language server initialized work_done_token=None process_id=11778 root_uri='file:///mnt/code' capabilities=ClientCapabilities(workspace=WorkspaceClientCapabilities(apply_edit=True, workspace_edit=WorkspaceEditClientCapabilities(document_changes=True, resource_operations=[<ResourceOperationKind.Create: 'create'>, <ResourceOperationKind.Rename: 'rename'>, <ResourceOperationKind.Delete: 'delete'>], failure_handling=<FailureHandlingKind.TextOnlyTransactional: 'textOnlyTransactional'>, normalizes_line_endings=True, change_annotation_support=ChangeAnnotationSupport(groups_on_label=True)), did_change_configuration=DidChangeConfigurationClientCapabilities(dynamic_registration=True), did_change_watched_files=DidChangeWatchedFilesClientCapabilities(dynamic_registration=True), symbol=WorkspaceSymbolClientCapabilities(dynamic_registration=True, symbol_kind=WorkspaceCapabilitiesSymbolKind(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), tag_support=WorkspaceCapabilitiesTagSupport(value_set=[<SymbolKind.File: 1>])), execute_command=ExecuteCommandClientCapabilities(dynamic_registration=True), workspace_folders=True, configuration=True, semantic_tokens=SemanticTokensWorkspaceClientCapabilities(refresh_support=True), code_lens=CodeLensWorkspaceClientCapabilities(refresh_support=True), file_operations=FileOperationsClientCapabilities(dynamic_registration=True, did_create=True, will_create=True, did_rename=True, will_rename=True, did_delete=True, will_delete=True)), text_document=TextDocumentClientCapabilities(synchronization=TextDocumentSyncClientCapabilities(dynamic_registration=True, will_save=True, will_save_wait_until=True, did_save=True), completion=CompletionClientCapabilities(dynamic_registration=True, completion_item=CompletionItemClientCapabilities(snippet_support=True, commit_characters_support=True, documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], deprecated_support=True, preselect_support=True, tag_support=CompletionTagSupportClientCapabilities(value_set=[<CompletionItemTag.Deprecated: 1>]), insert_replace_support=True, resolve_support=ResolveSupportClientCapabilities(properties=['documentation', 'detail', 'additionalTextEdits']), insert_text_mode_support=InsertTextModeSupportClientCapabilities(value_set=[<InsertTextMode.AsIs: 1>, <InsertTextMode.AdjustIndentation: 2>])), completion_item_kind=CompletionItemKindClientCapabilities(value_set=[<CompletionItemKind.Text: 1>, <CompletionItemKind.Method: 2>, <CompletionItemKind.Function: 3>, <CompletionItemKind.Constructor: 4>, <CompletionItemKind.Field: 5>, <CompletionItemKind.Variable: 6>, <CompletionItemKind.Class: 7>, <CompletionItemKind.Interface: 8>, <CompletionItemKind.Module: 9>, <CompletionItemKind.Property: 10>, <CompletionItemKind.Unit: 11>, <CompletionItemKind.Value: 12>, <CompletionItemKind.Enum: 13>, <CompletionItemKind.Keyword: 14>, <CompletionItemKind.Snippet: 15>, <CompletionItemKind.Color: 16>, <CompletionItemKind.File: 17>, <CompletionItemKind.Reference: 18>, <CompletionItemKind.Folder: 19>, <CompletionItemKind.EnumMember: 20>, <CompletionItemKind.Constant: 21>, <CompletionItemKind.Struct: 22>, <CompletionItemKind.Event: 23>, <CompletionItemKind.Operator: 24>, <CompletionItemKind.TypeParameter: 25>]), context_support=True), hover=HoverClientCapabilities(dynamic_registration=True, content_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>]), signature_help=SignatureHelpClientCapabilities(dynamic_registration=True, signature_information=SignatureHelpInformationClientCapabilities(documentation_format=[<MarkupKind.Markdown: 'markdown'>, <MarkupKind.PlainText: 'plaintext'>], parameter_information=SignatureHelpInformationParameterInformationClientCapabilities(label_offset_support=True), active_parameter_support=True), context_support=True), declaration=DeclarationClientCapabilities(dynamic_registration=True, link_support=True), definition=DefinitionClientCapabilities(dynamic_registration=True, link_support=True), type_definition=TypeDefinitionClientCapabilities(dynamic_registration=True, link_support=True), implementation=ImplementationClientCapabilities(dynamic_registration=True, link_support=True), references=ReferenceClientCapabilities(dynamic_registration=True), document_highlight=DocumentHighlightClientCapabilities(dynamic_registration=True), document_symbol=DocumentSymbolClientCapabilities(dynamic_registration=True, symbol_kind=WorkspaceCapabilitiesSymbolKind(value_set=[<SymbolKind.File: 1>, <SymbolKind.Module: 2>, <SymbolKind.Namespace: 3>, <SymbolKind.Package: 4>, <SymbolKind.Class: 5>, <SymbolKind.Method: 6>, <SymbolKind.Property: 7>, <SymbolKind.Field: 8>, <SymbolKind.Constructor: 9>, <SymbolKind.Enum: 10>, <SymbolKind.Interface: 11>, <SymbolKind.Function: 12>, <SymbolKind.Variable: 13>, <SymbolKind.Constant: 14>, <SymbolKind.String: 15>, <SymbolKind.Number: 16>, <SymbolKind.Boolean: 17>, <SymbolKind.Array: 18>, <SymbolKind.Object: 19>, <SymbolKind.Key: 20>, <SymbolKind.Null: 21>, <SymbolKind.EnumMember: 22>, <SymbolKind.Struct: 23>, <SymbolKind.Event: 24>, <SymbolKind.Operator: 25>, <SymbolKind.TypeParameter: 26>]), hierarchical_document_symbol_support=True, tag_support=WorkspaceCapabilitiesTagSupport(value_set=[<SymbolKind.File: 1>]), label_support=True), code_action=CodeActionClientCapabilities(dynamic_registration=True, code_action_literal_support=CodeActionLiteralSupportClientCapabilities(code_action_kind=CodeActionLiteralSupportActionKindClientCapabilities(value_set=['', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 'refactor.rewrite', 'source', 'source.organizeImports'])), is_preferred_support=True, disabled_support=True, data_support=True, resolve_support=ResolveSupportClientCapabilities(properties=['edit']), honors_change_annotations=False), code_lens=CodeLensClientCapabilities(dynamic_registration=True), document_link=DocumentLinkClientCapabilities(dynamic_registration=True, tooltip_support=True), color_provider=DocumentColorClientCapabilities(dynamic_registration=True), formatting=DocumentFormattingClientCapabilities(dynamic_registration=True), range_formatting=DocumentRangeFormattingClientCapabilities(dynamic_registration=True), on_type_formatting=DocumentOnTypeFormattingClientCapabilities(dynamic_registration=True), rename=RenameClientCapabilities(dynamic_registration=True, prepare_support=True, prepare_support_default_behavior=<PrepareSupportDefaultBehavior.Identifier: 1>, honors_change_annotations=True), publish_diagnostics=PublishDiagnosticsClientCapabilities(related_information=True, tag_support=PublishDiagnosticsTagSupportClientCapabilities(value_set=[<DiagnosticTag.Unnecessary: 1>, <DiagnosticTag.Deprecated: 2>]), version_support=False, code_description_support=True, data_support=True), folding_range=FoldingRangeClientCapabilities(dynamic_registration=True, range_limit=5000, line_folding_only=True), selection_range=SelectionRangeClientCapabilities(dynamic_registration=True), linked_editing_range=LinkedEditingRangeClientCapabilities(dynamic_registration=True), call_hierarchy=CallHierarchyClientCapabilities(dynamic_registration=True), semantic_tokens=SemanticTokensClientCapabilities(requests=SemanticTokensRequests(range=True, full=SemanticTokensRequestsFull(delta=True)), token_types=['namespace', 'type', 'class', 'enum', 'interface', 'struct', 'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 'number', 'regexp', 'operator'], token_modifiers=['declaration', 'definition', 'readonly', 'static', 'deprecated', 'abstract', 'async', 'modification', 'documentation', 'defaultLibrary'], formats=[<TokenFormat.Relative: 'relative'>], overlapping_token_support=False, multiline_token_support=False, dynamic_registration=True), moniker=None), window=WindowClientCapabilities(work_done_progress=True, show_message=ShowMessageRequestClientCapabilities(message_action_item=ShowMessageRequestActionItem(additional_properties_support=True)), show_document=ShowDocumentClientCapabilities(support=True)), general=GeneralClientCapabilities(regular_expressions=RegularExpressionsClientCapabilities(engine='ECMAScript', version='ES2020'), markdown=MarkdownClientCapabilities(parser='marked', version='1.1.0')), experimental=None) client_info=ClientInfo(name='code-server', version='1.63.0') locale='en' root_path='/mnt/code' initialization_options={'markupKindPreferred': 'markdown', 'completion': {'resolveEagerly': False, 'disableSnippets': False}, 'diagnostics': {'enable': True, 'didOpen': True, 'didSave': True, 'didChange': True}, 'workspace': {'extraPaths': ['/mnt/code'], 'symbols': {'maxSymbols': 0}}} trace=<Trace.Off: 'off'> workspace_folders=[WorkspaceFolder(uri='file:///mnt/code', name='code')]
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 0, "result": {"capabilities": {"textDocumentSync": {"openClose": true, "change": 2, "willSave": false, "willSaveWaitUntil": false, "save": true}, "completionProvider": {"triggerCharacters": [".", "'", "\""], "resolveProvider": true}, "hoverProvider": true, "signatureHelpProvider": {"triggerCharacters": ["(", ","]}, "definitionProvider": true, "referencesProvider": true, "documentHighlightProvider": true, "documentSymbolProvider": true, "codeActionProvider": {"codeActionKinds": ["refactor.inline", "refactor.extract"]}, "renameProvider": true, "executeCommandProvider": {"commands": []}, "workspaceSymbolProvider": true, "workspace": {"workspaceFolders": {"supported": true, "changeNotifications": true}, "fileOperations": {}}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 1, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 2, "result": [{"name": "subprocess", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 17}}, "selectionRange": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 17}}, "detail": "module subprocess", "children": []}, {"name": "json", "kind": 2, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 6, "character": 11}}, "selectionRange": {"start": {"line": 6, "character": 7}, "end": {"line": 6, "character": 11}}, "detail": "module json", "children": []}, {"name": "flask", "kind": 2, "range": {"start": {"line": 7, "character": 0}, "end": {"line": 7, "character": 12}}, "selectionRange": {"start": {"line": 7, "character": 7}, "end": {"line": 7, "character": 12}}, "detail": "module flask", "children": []}, {"name": "request", "kind": 13, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 18}, "end": {"line": 8, "character": 25}}, "detail": "instance request", "children": []}, {"name": "redirect", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 27}, "end": {"line": 8, "character": 35}}, "detail": "def redirect", "children": []}, {"name": "url_for", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 37}, "end": {"line": 8, "character": 44}}, "detail": "def url_for", "children": []}, {"name": "np", "kind": 2, "range": {"start": {"line": 9, "character": 0}, "end": {"line": 9, "character": 18}}, "selectionRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 18}}, "detail": "module np", "children": []}, {"name": "ReverseProxied", "kind": 5, "range": {"start": {"line": 11, "character": 0}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 11, "character": 6}, "end": {"line": 11, "character": 20}}, "detail": "class ReverseProxied", "children": [{"name": "__init__", "kind": 6, "range": {"start": {"line": 12, "character": 2}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 12, "character": 6}, "end": {"line": 12, "character": 14}}, "detail": "def __init__", "children": [{"name": "app", "kind": 7, "range": {"start": {"line": 13, "character": 6}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 13, "character": 11}, "end": {"line": 13, "character": 14}}, "detail": "self.app = app", "children": []}]}, {"name": "__call__", "kind": 6, "range": {"start": {"line": 14, "character": 2}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 14, "character": 6}, "end": {"line": 14, "character": 14}}, "detail": "def __call__", "children": []}]}, {"name": "app", "kind": 13, "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 27}}, "selectionRange": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 3}}, "detail": "app = flask.Flask(__name__)", "children": []}, {"name": "wsgi_app", "kind": 13, "range": {"start": {"line": 33, "character": 0}, "end": {"line": 33, "character": 43}}, "selectionRange": {"start": {"line": 33, "character": 4}, "end": {"line": 33, "character": 12}}, "detail": "app.wsgi_app = ReverseProxied(app.wsgi_app)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 41, "character": 0}, "end": {"line": 43, "character": 0}}, "selectionRange": {"start": {"line": 41, "character": 46}, "end": {"line": 41, "character": 47}}, "detail": "with open('forms/titles.schema.json', 'r') as f: jsonschema = json.load(f)", "children": []}, {"name": "jsonschema", "kind": 13, "range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 27}}, "selectionRange": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}, "detail": "jsonschema = json.load(f)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 47, "character": 0}}, "selectionRange": {"start": {"line": 45, "character": 41}, "end": {"line": 45, "character": 42}}, "detail": "with open('forms/displays.json', 'r') as f: displays = json.load(f)", "children": []}, {"name": "displays", "kind": 13, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 25}}, "selectionRange": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}, "detail": "displays = json.load(f)", "children": []}, {"name": "index_page", "kind": 12, "range": {"start": {"line": 60, "character": 0}, "end": {"line": 61, "character": 67}}, "selectionRange": {"start": {"line": 60, "character": 4}, "end": {"line": 60, "character": 14}}, "detail": "def index_page", "children": []}, {"name": "display", "kind": 12, "range": {"start": {"line": 66, "character": 0}, "end": {"line": 67, "character": 80}}, "selectionRange": {"start": {"line": 66, "character": 4}, "end": {"line": 66, "character": 11}}, "detail": "def display", "children": []}, {"name": "redirect_test", "kind": 12, "range": {"start": {"line": 72, "character": 0}, "end": {"line": 73, "character": 44}}, "selectionRange": {"start": {"line": 72, "character": 4}, "end": {"line": 72, "character": 17}}, "detail": "def redirect_test", "children": []}, {"name": "another_page", "kind": 12, "range": {"start": {"line": 77, "character": 0}, "end": {"line": 80, "character": 12}}, "selectionRange": {"start": {"line": 77, "character": 4}, "end": {"line": 77, "character": 16}}, "detail": "def another_page", "children": []}, {"name": "random", "kind": 12, "range": {"start": {"line": 84, "character": 0}, "end": {"line": 86, "character": 35}}, "selectionRange": {"start": {"line": 84, "character": 4}, "end": {"line": 84, "character": 10}}, "detail": "def random", "children": []}, {"name": "submit", "kind": 12, "range": {"start": {"line": 91, "character": 0}, "end": {"line": 94, "character": 24}}, "selectionRange": {"start": {"line": 91, "character": 4}, "end": {"line": 91, "character": 10}}, "detail": "def submit", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 3, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 4, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 5, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 6, "result": [{"name": "subprocess", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 17}}, "selectionRange": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 17}}, "detail": "module subprocess", "children": []}, {"name": "json", "kind": 2, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 6, "character": 11}}, "selectionRange": {"start": {"line": 6, "character": 7}, "end": {"line": 6, "character": 11}}, "detail": "module json", "children": []}, {"name": "flask", "kind": 2, "range": {"start": {"line": 7, "character": 0}, "end": {"line": 7, "character": 12}}, "selectionRange": {"start": {"line": 7, "character": 7}, "end": {"line": 7, "character": 12}}, "detail": "module flask", "children": []}, {"name": "request", "kind": 13, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 18}, "end": {"line": 8, "character": 25}}, "detail": "instance request", "children": []}, {"name": "redirect", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 27}, "end": {"line": 8, "character": 35}}, "detail": "def redirect", "children": []}, {"name": "url_for", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 37}, "end": {"line": 8, "character": 44}}, "detail": "def url_for", "children": []}, {"name": "np", "kind": 2, "range": {"start": {"line": 9, "character": 0}, "end": {"line": 9, "character": 18}}, "selectionRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 18}}, "detail": "module np", "children": []}, {"name": "ReverseProxied", "kind": 5, "range": {"start": {"line": 11, "character": 0}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 11, "character": 6}, "end": {"line": 11, "character": 20}}, "detail": "class ReverseProxied", "children": [{"name": "__init__", "kind": 6, "range": {"start": {"line": 12, "character": 2}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 12, "character": 6}, "end": {"line": 12, "character": 14}}, "detail": "def __init__", "children": [{"name": "app", "kind": 7, "range": {"start": {"line": 13, "character": 6}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 13, "character": 11}, "end": {"line": 13, "character": 14}}, "detail": "self.app = app", "children": []}]}, {"name": "__call__", "kind": 6, "range": {"start": {"line": 14, "character": 2}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 14, "character": 6}, "end": {"line": 14, "character": 14}}, "detail": "def __call__", "children": []}]}, {"name": "app", "kind": 13, "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 27}}, "selectionRange": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 3}}, "detail": "app = flask.Flask(__name__)", "children": []}, {"name": "wsgi_app", "kind": 13, "range": {"start": {"line": 33, "character": 0}, "end": {"line": 33, "character": 43}}, "selectionRange": {"start": {"line": 33, "character": 4}, "end": {"line": 33, "character": 12}}, "detail": "app.wsgi_app = ReverseProxied(app.wsgi_app)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 41, "character": 0}, "end": {"line": 43, "character": 0}}, "selectionRange": {"start": {"line": 41, "character": 46}, "end": {"line": 41, "character": 47}}, "detail": "with open('forms/titles.schema.json', 'r') as f: jsonschema = json.load(f)", "children": []}, {"name": "jsonschema", "kind": 13, "range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 27}}, "selectionRange": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}, "detail": "jsonschema = json.load(f)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 47, "character": 0}}, "selectionRange": {"start": {"line": 45, "character": 41}, "end": {"line": 45, "character": 42}}, "detail": "with open('forms/displays.json', 'r') as f: displays = json.load(f)", "children": []}, {"name": "displays", "kind": 13, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 25}}, "selectionRange": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}, "detail": "displays = json.load(f)", "children": []}, {"name": "index_page", "kind": 12, "range": {"start": {"line": 60, "character": 0}, "end": {"line": 61, "character": 67}}, "selectionRange": {"start": {"line": 60, "character": 4}, "end": {"line": 60, "character": 14}}, "detail": "def index_page", "children": []}, {"name": "display", "kind": 12, "range": {"start": {"line": 66, "character": 0}, "end": {"line": 67, "character": 80}}, "selectionRange": {"start": {"line": 66, "character": 4}, "end": {"line": 66, "character": 11}}, "detail": "def display", "children": []}, {"name": "redirect_test", "kind": 12, "range": {"start": {"line": 72, "character": 0}, "end": {"line": 73, "character": 44}}, "selectionRange": {"start": {"line": 72, "character": 4}, "end": {"line": 72, "character": 17}}, "detail": "def redirect_test", "children": []}, {"name": "another_page", "kind": 12, "range": {"start": {"line": 77, "character": 0}, "end": {"line": 80, "character": 12}}, "selectionRange": {"start": {"line": 77, "character": 4}, "end": {"line": 77, "character": 16}}, "detail": "def another_page", "children": []}, {"name": "random", "kind": 12, "range": {"start": {"line": 84, "character": 0}, "end": {"line": 86, "character": 35}}, "selectionRange": {"start": {"line": 84, "character": 4}, "end": {"line": 84, "character": 10}}, "detail": "def random", "children": []}, {"name": "submit", "kind": 12, "range": {"start": {"line": 91, "character": 0}, "end": {"line": 94, "character": 24}}, "selectionRange": {"start": {"line": 91, "character": 4}, "end": {"line": 91, "character": 10}}, "detail": "def submit", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 7, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 8, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 9, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 10, "result": {"contents": {"kind": "markdown", "value": "```python\nmodule json\n```\n---\nJSON (JavaScript Object Notation) <http://json.org> is a subset of\nJavaScript syntax (ECMA-262 3rd edition) used as a lightweight data\ninterchange format.\n\n`json` exposes an API familiar to users of the standard library\n`marshal` and `pickle` modules.  It is derived from a\nversion of the externally maintained simplejson library.\n\nEncoding basic Python object hierarchies\n\n```python\n>>> import json\n>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])\n'[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n>>> print(json.dumps(\"\\\"foo\\bar\"))\n\"\\\"foo\\bar\"\n>>> print(json.dumps('\\u1234'))\n\"\\u1234\"\n>>> print(json.dumps('\\\\'))\n\"\\\\\"\n>>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True))\n{\"a\": 0, \"b\": 0, \"c\": 0}\n>>> from io import StringIO\n>>> io = StringIO()\n>>> json.dump(['streaming API'], io)\n>>> io.getvalue()\n'[\"streaming API\"]'\n```\n\nCompact encoding\n\n```python\n>>> import json\n>>> mydict = {'4': 5, '6': 7}\n>>> json.dumps([1,2,3,mydict], separators=(',', ':'))\n'[1,2,3,{\"4\":5,\"6\":7}]'\n```\n\nPretty printing\n\n```python\n>>> import json\n>>> print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4))\n{\n    \"4\": 5,\n    \"6\": 7\n}\n```\n\nDecoding JSON\n\n```python\n>>> import json\n>>> obj = ['foo', {'bar': ['baz', None, 1.0, 2]}]\n>>> json.loads('[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]') == obj\nTrue\n>>> json.loads('\"\\\\\"foo\\\\bar\"') == '\"foo\\x08ar'\nTrue\n>>> from io import StringIO\n>>> io = StringIO('[\"streaming API\"]')\n>>> json.load(io)[0] == 'streaming API'\nTrue\n```\n\nSpecializing JSON object decoding\n\n```python\n>>> import json\n>>> def as_complex(dct):\n...     if '__complex__' in dct:\n...         return complex(dct['real'], dct['imag'])\n...     return dct\n...\n>>> json.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}',\n...     object_hook=as_complex)\n(1+2j)\n>>> from decimal import Decimal\n>>> json.loads('1.1', parse_float=Decimal) == Decimal('1.1')\nTrue\n```\n\nSpecializing JSON object encoding\n\n```python\n>>> import json\n>>> def encode_complex(obj):\n...     if isinstance(obj, complex):\n...         return [obj.real, obj.imag]\n...     raise TypeError(f'Object of type {obj.__class__.__name__} '\n...                     f'is not JSON serializable')\n...\n>>> json.dumps(2 + 1j, default=encode_complex)\n'[2.0, 1.0]'\n>>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)\n'[2.0, 1.0]'\n>>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))\n'[2.0, 1.0]'\n\n```\n\nUsing json.tool from the shell to validate and pretty-print\n\n```python\n$ echo '{\"json\":\"obj\"}' | python -m json.tool\n{\n    \"json\": \"obj\"\n}\n$ echo '{ 1.2:3.4}' | python -m json.tool\nExpecting property name enclosed in double quotes: line 1 column 3 (char 2)\n```"}, "range": {"start": {"line": 46, "character": 13}, "end": {"line": 46, "character": 17}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 11, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 12, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 13, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 14, "result": {"contents": {"kind": "markdown", "value": "```python\ninstance str\n```\n---\n```text\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.\n```\n**Full name:** `builtins.str`"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 15, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 16, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 1}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "jls_extract_var = 'forms/displays.json'\n"}, {"range": {"start": {"line": 45, "character": 10}, "end": {"line": 45, "character": 26}}, "newText": ""}, {"range": {"start": {"line": 45, "character": 27}, "end": {"line": 45, "character": 31}}, "newText": "ls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 1}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "def jls_extract_def():\n    return 'forms/displays.json'\n\n\n"}, {"range": {"start": {"line": 45, "character": 10}, "end": {"line": 45, "character": 26}}, "newText": ""}, {"range": {"start": {"line": 45, "character": 27}, "end": {"line": 45, "character": 31}}, "newText": "ls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 17, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 1}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "jls_extract_var = 'forms/displays.json'\n"}, {"range": {"start": {"line": 45, "character": 10}, "end": {"line": 45, "character": 26}}, "newText": ""}, {"range": {"start": {"line": 45, "character": 27}, "end": {"line": 45, "character": 31}}, "newText": "ls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 1}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "def jls_extract_def():\n    return 'forms/displays.json'\n\n\n"}, {"range": {"start": {"line": 45, "character": 10}, "end": {"line": 45, "character": 26}}, "newText": ""}, {"range": {"start": {"line": 45, "character": 27}, "end": {"line": 45, "character": 31}}, "newText": "ls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 18, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 19, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 20, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 2}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "jls_extract_var = ''\n"}, {"range": {"start": {"line": 45, "character": 10}, "end": {"line": 45, "character": 12}}, "newText": "jls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 2}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "def jls_extract_def():\n    return ''\n\n\n"}, {"range": {"start": {"line": 45, "character": 10}, "end": {"line": 45, "character": 12}}, "newText": "jls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 21, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 3}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "jls_extract_var = 'forms/titles-databook_Displays.json'\n"}, {"range": {"start": {"line": 45, "character": 10}, "end": {"line": 45, "character": 42}}, "newText": ""}, {"range": {"start": {"line": 45, "character": 43}, "end": {"line": 45, "character": 47}}, "newText": "ls_extract_var"}]}]}}, {"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 3}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "def jls_extract_def():\n    return 'forms/titles-databook_Displays.json'\n\n\n"}, {"range": {"start": {"line": 45, "character": 10}, "end": {"line": 45, "character": 42}}, "newText": ""}, {"range": {"start": {"line": 45, "character": 43}, "end": {"line": 45, "character": 47}}, "newText": "ls_extract_def()"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 22, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 23, "result": [{"name": "subprocess", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 17}}, "selectionRange": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 17}}, "detail": "module subprocess", "children": []}, {"name": "json", "kind": 2, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 6, "character": 11}}, "selectionRange": {"start": {"line": 6, "character": 7}, "end": {"line": 6, "character": 11}}, "detail": "module json", "children": []}, {"name": "flask", "kind": 2, "range": {"start": {"line": 7, "character": 0}, "end": {"line": 7, "character": 12}}, "selectionRange": {"start": {"line": 7, "character": 7}, "end": {"line": 7, "character": 12}}, "detail": "module flask", "children": []}, {"name": "request", "kind": 13, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 18}, "end": {"line": 8, "character": 25}}, "detail": "instance request", "children": []}, {"name": "redirect", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 27}, "end": {"line": 8, "character": 35}}, "detail": "def redirect", "children": []}, {"name": "url_for", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 37}, "end": {"line": 8, "character": 44}}, "detail": "def url_for", "children": []}, {"name": "np", "kind": 2, "range": {"start": {"line": 9, "character": 0}, "end": {"line": 9, "character": 18}}, "selectionRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 18}}, "detail": "module np", "children": []}, {"name": "ReverseProxied", "kind": 5, "range": {"start": {"line": 11, "character": 0}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 11, "character": 6}, "end": {"line": 11, "character": 20}}, "detail": "class ReverseProxied", "children": [{"name": "__init__", "kind": 6, "range": {"start": {"line": 12, "character": 2}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 12, "character": 6}, "end": {"line": 12, "character": 14}}, "detail": "def __init__", "children": [{"name": "app", "kind": 7, "range": {"start": {"line": 13, "character": 6}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 13, "character": 11}, "end": {"line": 13, "character": 14}}, "detail": "self.app = app", "children": []}]}, {"name": "__call__", "kind": 6, "range": {"start": {"line": 14, "character": 2}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 14, "character": 6}, "end": {"line": 14, "character": 14}}, "detail": "def __call__", "children": []}]}, {"name": "app", "kind": 13, "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 27}}, "selectionRange": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 3}}, "detail": "app = flask.Flask(__name__)", "children": []}, {"name": "wsgi_app", "kind": 13, "range": {"start": {"line": 33, "character": 0}, "end": {"line": 33, "character": 43}}, "selectionRange": {"start": {"line": 33, "character": 4}, "end": {"line": 33, "character": 12}}, "detail": "app.wsgi_app = ReverseProxied(app.wsgi_app)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 41, "character": 0}, "end": {"line": 43, "character": 0}}, "selectionRange": {"start": {"line": 41, "character": 46}, "end": {"line": 41, "character": 47}}, "detail": "with open('forms/titles.schema.json', 'r') as f: jsonschema = json.load(f)", "children": []}, {"name": "jsonschema", "kind": 13, "range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 27}}, "selectionRange": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}, "detail": "jsonschema = json.load(f)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 47, "character": 0}}, "selectionRange": {"start": {"line": 45, "character": 57}, "end": {"line": 45, "character": 58}}, "detail": "with open('forms/titles-databook_Displays.json', 'r') as f: displays = json.load(f)", "children": []}, {"name": "displays", "kind": 13, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 25}}, "selectionRange": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}, "detail": "displays = json.load(f)", "children": []}, {"name": "index_page", "kind": 12, "range": {"start": {"line": 60, "character": 0}, "end": {"line": 61, "character": 67}}, "selectionRange": {"start": {"line": 60, "character": 4}, "end": {"line": 60, "character": 14}}, "detail": "def index_page", "children": []}, {"name": "display", "kind": 12, "range": {"start": {"line": 66, "character": 0}, "end": {"line": 67, "character": 80}}, "selectionRange": {"start": {"line": 66, "character": 4}, "end": {"line": 66, "character": 11}}, "detail": "def display", "children": []}, {"name": "redirect_test", "kind": 12, "range": {"start": {"line": 72, "character": 0}, "end": {"line": 73, "character": 44}}, "selectionRange": {"start": {"line": 72, "character": 4}, "end": {"line": 72, "character": 17}}, "detail": "def redirect_test", "children": []}, {"name": "another_page", "kind": 12, "range": {"start": {"line": 77, "character": 0}, "end": {"line": 80, "character": 12}}, "selectionRange": {"start": {"line": 77, "character": 4}, "end": {"line": 77, "character": 16}}, "detail": "def another_page", "children": []}, {"name": "random", "kind": 12, "range": {"start": {"line": 84, "character": 0}, "end": {"line": 86, "character": 35}}, "selectionRange": {"start": {"line": 84, "character": 4}, "end": {"line": 84, "character": 10}}, "detail": "def random", "children": []}, {"name": "submit", "kind": 12, "range": {"start": {"line": 91, "character": 0}, "end": {"line": 94, "character": 24}}, "selectionRange": {"start": {"line": 91, "character": 4}, "end": {"line": 91, "character": 10}}, "detail": "def submit", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 24, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 25, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 26, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 27, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 28, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 29, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 30, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 31, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 32, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 33, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 34, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 35, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword with\n```\n---\n```text\nThe \"with\" statement\n********************\n\nThe \"with\" statement is used to wrap the execution of a block with\nmethods defined by a context manager (see section With Statement\nContext Managers). This allows common \"try\"\u2026\"except\"\u2026\"finally\" usage\npatterns to be encapsulated for convenient reuse.\n\n   with_stmt ::= \"with\" with_item (\",\" with_item)* \":\" suite\n   with_item ::= expression [\"as\" target]\n\nThe execution of the \"with\" statement with one \u201citem\u201d proceeds as\nfollows:\n\n1. The context expression (the expression given in the \"with_item\") is\n   evaluated to obtain a context manager.\n\n2. The context manager\u2019s \"__enter__()\" is loaded for later use.\n\n3. The context manager\u2019s \"__exit__()\" is loaded for later use.\n\n4. The context manager\u2019s \"__enter__()\" method is invoked.\n\n5. If a target was included in the \"with\" statement, the return value\n   from \"__enter__()\" is assigned to it.\n\n   Note:\n\n     The \"with\" statement guarantees that if the \"__enter__()\" method\n     returns without an error, then \"__exit__()\" will always be\n     called. Thus, if an error occurs during the assignment to the\n     target list, it will be treated the same as an error occurring\n     within the suite would be. See step 6 below.\n\n6. The suite is executed.\n\n7. The context manager\u2019s \"__exit__()\" method is invoked.  If an\n   exception caused the suite to be exited, its type, value, and\n   traceback are passed as arguments to \"__exit__()\". Otherwise, three\n   \"None\" arguments are supplied.\n\n   If the suite was exited due to an exception, and the return value\n   from the \"__exit__()\" method was false, the exception is reraised.\n   If the return value was true, the exception is suppressed, and\n   execution continues with the statement following the \"with\"\n   statement.\n\n   If the suite was exited for any reason other than an exception, the\n   return value from \"__exit__()\" is ignored, and execution proceeds\n   at the normal location for the kind of exit that was taken.\n\nThe following code:\n\n   with EXPRESSION as TARGET:\n       SUITE\n\nis semantically equivalent to:\n\n   manager = (EXPRESSION)\n   enter = type(manager).__enter__\n   exit = type(manager).__exit__\n   value = enter(manager)\n   hit_except = False\n\n   try:\n       TARGET = value\n       SUITE\n   except:\n       hit_except = True\n       if not exit(manager, *sys.exc_info()):\n           raise\n   finally:\n       if not hit_except:\n           exit(manager, None, None, None)\n\nWith more than one item, the context managers are processed as if\nmultiple \"with\" statements were nested:\n\n   with A() as a, B() as b:\n       SUITE\n\nis semantically equivalent to:\n\n   with A() as a:\n       with B() as b:\n           SUITE\n\nChanged in version 3.1: Support for multiple context expressions.\n\nSee also:\n\n  **PEP 343** - The \u201cwith\u201d statement\n     The specification, background, and examples for the Python \"with\"\n     statement.\n```"}, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 4}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 36, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 37, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 3}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "def jls_extract_def():\n    "}, {"range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 2}}, "newText": "    "}, {"range": {"start": {"line": 46, "character": 24}, "end": {"line": 46, "character": 24}}, "newText": ")\n    return displays\n\n\ndisplays = jls_extract_def("}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 38, "result": [{"title": "Extract expression into function 'jls_extract_def'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 3}, "edits": [{"range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 0}}, "newText": "def jls_extract_def():\n    "}, {"range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 2}}, "newText": "    "}, {"range": {"start": {"line": 46, "character": 24}, "end": {"line": 46, "character": 24}}, "newText": ")\n    return displays\n\n\ndisplays = jls_extract_def("}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 39, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword with\n```\n---\n```text\nThe \"with\" statement\n********************\n\nThe \"with\" statement is used to wrap the execution of a block with\nmethods defined by a context manager (see section With Statement\nContext Managers). This allows common \"try\"\u2026\"except\"\u2026\"finally\" usage\npatterns to be encapsulated for convenient reuse.\n\n   with_stmt ::= \"with\" with_item (\",\" with_item)* \":\" suite\n   with_item ::= expression [\"as\" target]\n\nThe execution of the \"with\" statement with one \u201citem\u201d proceeds as\nfollows:\n\n1. The context expression (the expression given in the \"with_item\") is\n   evaluated to obtain a context manager.\n\n2. The context manager\u2019s \"__enter__()\" is loaded for later use.\n\n3. The context manager\u2019s \"__exit__()\" is loaded for later use.\n\n4. The context manager\u2019s \"__enter__()\" method is invoked.\n\n5. If a target was included in the \"with\" statement, the return value\n   from \"__enter__()\" is assigned to it.\n\n   Note:\n\n     The \"with\" statement guarantees that if the \"__enter__()\" method\n     returns without an error, then \"__exit__()\" will always be\n     called. Thus, if an error occurs during the assignment to the\n     target list, it will be treated the same as an error occurring\n     within the suite would be. See step 6 below.\n\n6. The suite is executed.\n\n7. The context manager\u2019s \"__exit__()\" method is invoked.  If an\n   exception caused the suite to be exited, its type, value, and\n   traceback are passed as arguments to \"__exit__()\". Otherwise, three\n   \"None\" arguments are supplied.\n\n   If the suite was exited due to an exception, and the return value\n   from the \"__exit__()\" method was false, the exception is reraised.\n   If the return value was true, the exception is suppressed, and\n   execution continues with the statement following the \"with\"\n   statement.\n\n   If the suite was exited for any reason other than an exception, the\n   return value from \"__exit__()\" is ignored, and execution proceeds\n   at the normal location for the kind of exit that was taken.\n\nThe following code:\n\n   with EXPRESSION as TARGET:\n       SUITE\n\nis semantically equivalent to:\n\n   manager = (EXPRESSION)\n   enter = type(manager).__enter__\n   exit = type(manager).__exit__\n   value = enter(manager)\n   hit_except = False\n\n   try:\n       TARGET = value\n       SUITE\n   except:\n       hit_except = True\n       if not exit(manager, *sys.exc_info()):\n           raise\n   finally:\n       if not hit_except:\n           exit(manager, None, None, None)\n\nWith more than one item, the context managers are processed as if\nmultiple \"with\" statements were nested:\n\n   with A() as a, B() as b:\n       SUITE\n\nis semantically equivalent to:\n\n   with A() as a:\n       with B() as b:\n           SUITE\n\nChanged in version 3.1: Support for multiple context expressions.\n\nSee also:\n\n  **PEP 343** - The \u201cwith\u201d statement\n     The specification, background, and examples for the Python \"with\"\n     statement.\n```"}, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 45, "character": 4}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 40, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 41, "result": [{"range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 42, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 43, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 44, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 45, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 46, "result": [{"range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 47, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 48, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 49, "result": [{"name": "subprocess", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 17}}, "selectionRange": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 17}}, "detail": "module subprocess", "children": []}, {"name": "json", "kind": 2, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 6, "character": 11}}, "selectionRange": {"start": {"line": 6, "character": 7}, "end": {"line": 6, "character": 11}}, "detail": "module json", "children": []}, {"name": "flask", "kind": 2, "range": {"start": {"line": 7, "character": 0}, "end": {"line": 7, "character": 12}}, "selectionRange": {"start": {"line": 7, "character": 7}, "end": {"line": 7, "character": 12}}, "detail": "module flask", "children": []}, {"name": "request", "kind": 13, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 18}, "end": {"line": 8, "character": 25}}, "detail": "instance request", "children": []}, {"name": "redirect", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 27}, "end": {"line": 8, "character": 35}}, "detail": "def redirect", "children": []}, {"name": "url_for", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 37}, "end": {"line": 8, "character": 44}}, "detail": "def url_for", "children": []}, {"name": "np", "kind": 2, "range": {"start": {"line": 9, "character": 0}, "end": {"line": 9, "character": 18}}, "selectionRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 18}}, "detail": "module np", "children": []}, {"name": "ReverseProxied", "kind": 5, "range": {"start": {"line": 11, "character": 0}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 11, "character": 6}, "end": {"line": 11, "character": 20}}, "detail": "class ReverseProxied", "children": [{"name": "__init__", "kind": 6, "range": {"start": {"line": 12, "character": 2}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 12, "character": 6}, "end": {"line": 12, "character": 14}}, "detail": "def __init__", "children": [{"name": "app", "kind": 7, "range": {"start": {"line": 13, "character": 6}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 13, "character": 11}, "end": {"line": 13, "character": 14}}, "detail": "self.app = app", "children": []}]}, {"name": "__call__", "kind": 6, "range": {"start": {"line": 14, "character": 2}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 14, "character": 6}, "end": {"line": 14, "character": 14}}, "detail": "def __call__", "children": []}]}, {"name": "app", "kind": 13, "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 27}}, "selectionRange": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 3}}, "detail": "app = flask.Flask(__name__)", "children": []}, {"name": "wsgi_app", "kind": 13, "range": {"start": {"line": 33, "character": 0}, "end": {"line": 33, "character": 43}}, "selectionRange": {"start": {"line": 33, "character": 4}, "end": {"line": 33, "character": 12}}, "detail": "app.wsgi_app = ReverseProxied(app.wsgi_app)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 41, "character": 0}, "end": {"line": 43, "character": 0}}, "selectionRange": {"start": {"line": 41, "character": 46}, "end": {"line": 41, "character": 47}}, "detail": "with open('forms/titles.schema.json', 'r') as f: jsonschema = json.load(f)", "children": []}, {"name": "jsonschema", "kind": 13, "range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 27}}, "selectionRange": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}, "detail": "jsonschema = json.load(f)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 47, "character": 0}}, "selectionRange": {"start": {"line": 45, "character": 57}, "end": {"line": 45, "character": 58}}, "detail": "with open('forms/titles-databook_Displays.json', 'r') as f: displays = json.load(f)", "children": []}, {"name": "displays", "kind": 13, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 25}}, "selectionRange": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}, "detail": "displays = json.load(f)", "children": []}, {"name": "index_page", "kind": 12, "range": {"start": {"line": 60, "character": 0}, "end": {"line": 61, "character": 67}}, "selectionRange": {"start": {"line": 60, "character": 4}, "end": {"line": 60, "character": 14}}, "detail": "def index_page", "children": []}, {"name": "display", "kind": 12, "range": {"start": {"line": 66, "character": 0}, "end": {"line": 67, "character": 80}}, "selectionRange": {"start": {"line": 66, "character": 4}, "end": {"line": 66, "character": 11}}, "detail": "def display", "children": []}, {"name": "redirect_test", "kind": 12, "range": {"start": {"line": 72, "character": 0}, "end": {"line": 73, "character": 44}}, "selectionRange": {"start": {"line": 72, "character": 4}, "end": {"line": 72, "character": 17}}, "detail": "def redirect_test", "children": []}, {"name": "another_page", "kind": 12, "range": {"start": {"line": 77, "character": 0}, "end": {"line": 80, "character": 12}}, "selectionRange": {"start": {"line": 77, "character": 4}, "end": {"line": 77, "character": 16}}, "detail": "def another_page", "children": []}, {"name": "random", "kind": 12, "range": {"start": {"line": 84, "character": 0}, "end": {"line": 86, "character": 35}}, "selectionRange": {"start": {"line": 84, "character": 4}, "end": {"line": 84, "character": 10}}, "detail": "def random", "children": []}, {"name": "submit", "kind": 12, "range": {"start": {"line": 91, "character": 0}, "end": {"line": 94, "character": 24}}, "selectionRange": {"start": {"line": 91, "character": 4}, "end": {"line": 91, "character": 10}}, "detail": "def submit", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 50, "result": {"contents": {"kind": "markdown", "value": "```python\ndef open(file: Union[str, bytes, int], mode: str=..., buffering: int=..., encoding: Optional[str]=..., errors: Optional[str]=..., newline: Optional[str]=..., closefd: bool=..., opener: Optional[Callable[[str, int], int]]=...) -> IO[Any]\n```\n---\n```text\nOpen file and return a stream.  Raise OSError upon failure.\n\nfile is either a text or byte string giving the name (and the path\nif the file isn't in the current working directory) of the file to\nbe opened or an integer file descriptor of the file to be\nwrapped. (If a file descriptor is given, it is closed when the\nreturned I/O object is closed, unless closefd is set to False.)\n\nmode is an optional string that specifies the mode in which the file\nis opened. It defaults to 'r' which means open for reading in text\nmode.  Other common values are 'w' for writing (truncating the file if\nit already exists), 'x' for creating and writing to a new file, and\n'a' for appending (which on some Unix systems, means that all writes\nappend to the end of the file regardless of the current seek position).\nIn text mode, if encoding is not specified the encoding used is platform\ndependent: locale.getpreferredencoding(False) is called to get the\ncurrent locale encoding. (For reading and writing raw bytes use binary\nmode and leave encoding unspecified.) The available modes are:\n\n========= ===============================================================\nCharacter Meaning\n--------- ---------------------------------------------------------------\n'r'       open for reading (default)\n'w'       open for writing, truncating the file first\n'x'       create a new file and open it for writing\n'a'       open for writing, appending to the end of the file if it exists\n'b'       binary mode\n't'       text mode (default)\n'+'       open a disk file for updating (reading and writing)\n'U'       universal newline mode (deprecated)\n========= ===============================================================\n\nThe default mode is 'rt' (open for reading text). For binary random\naccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\n'r+b' opens the file without truncation. The 'x' mode implies 'w' and\nraises an `FileExistsError` if the file already exists.\n\nPython distinguishes between files opened in binary and text modes,\neven when the underlying operating system doesn't. Files opened in\nbinary mode (appending 'b' to the mode argument) return contents as\nbytes objects without any decoding. In text mode (the default, or when\n't' is appended to the mode argument), the contents of the file are\nreturned as strings, the bytes having been first decoded using a\nplatform-dependent encoding or using the specified encoding if given.\n\n'U' mode is deprecated and will raise an exception in future versions\nof Python.  It has no effect in Python 3.  Use newline to control\nuniversal newlines mode.\n\nbuffering is an optional integer used to set the buffering policy.\nPass 0 to switch buffering off (only allowed in binary mode), 1 to select\nline buffering (only usable in text mode), and an integer > 1 to indicate\nthe size of a fixed-size chunk buffer.  When no buffering argument is\ngiven, the default buffering policy works as follows:\n\n* Binary files are buffered in fixed-size chunks; the size of the buffer\n  is chosen using a heuristic trying to determine the underlying device's\n  \"block size\" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n  On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n* \"Interactive\" text files (files for which isatty() returns True)\n  use line buffering.  Other text files use the policy described above\n  for binary files.\n\nencoding is the name of the encoding used to decode or encode the\nfile. This should only be used in text mode. The default encoding is\nplatform dependent, but any encoding supported by Python can be\npassed.  See the codecs module for the list of supported encodings.\n\nerrors is an optional string that specifies how encoding errors are to\nbe handled---this argument should not be used in binary mode. Pass\n'strict' to raise a ValueError exception if there is an encoding error\n(the default of None has the same effect), or pass 'ignore' to ignore\nerrors. (Note that ignoring encoding errors can lead to data loss.)\nSee the documentation for codecs.register or run 'help(codecs.Codec)'\nfor a list of the permitted encoding error strings.\n\nnewline controls how universal newlines works (it only applies to text\nmode). It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as\nfollows:\n\n* On input, if newline is None, universal newlines mode is\n  enabled. Lines in the input can end in '\\n', '\\r', or '\\r\\n', and\n  these are translated into '\\n' before being returned to the\n  caller. If it is '', universal newline mode is enabled, but line\n  endings are returned to the caller untranslated. If it has any of\n  the other legal values, input lines are only terminated by the given\n  string, and the line ending is returned to the caller untranslated.\n\n* On output, if newline is None, any '\\n' characters written are\n  translated to the system default line separator, os.linesep. If\n  newline is '' or '\\n', no translation takes place. If newline is any\n  of the other legal values, any '\\n' characters written are translated\n  to the given string.\n\nIf closefd is False, the underlying file descriptor will be kept open\nwhen the file is closed. This does not work when a file name is given\nand must be True in that case.\n\nA custom opener can be used by passing a callable as *opener*. The\nunderlying file descriptor for the file object is then obtained by\ncalling *opener* with (*file*, *flags*). *opener* must return an open\nfile descriptor (passing os.open as *opener* results in functionality\nsimilar to passing None).\n\nopen() returns a file object whose type depends on the mode, and\nthrough which the standard file operations such as reading and writing\nare performed. When open() is used to open a file in a text mode ('w',\n'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\na file in a binary mode, the returned class varies: in read binary\nmode, it returns a BufferedReader; in write binary and append binary\nmodes, it returns a BufferedWriter, and in read/write mode, it returns\na BufferedRandom.\n\nIt is also possible to use a string or bytearray as a file for both\nreading and writing. For strings StringIO can be used like a file\nopened in a text mode, and for bytes a BytesIO can be used like a file\nopened in a binary mode.\n```\n**Full name:** `builtins.open`"}, "range": {"start": {"line": 45, "character": 5}, "end": {"line": 45, "character": 9}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 51, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword =\n```"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 52, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 53, "result": [{"range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 54, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 55, "result": {"contents": {"kind": "markdown", "value": "```python\njsonschema = json.load(f)\n```\n---\n**Full name:** `app.jsonschema`"}, "range": {"start": {"line": 61, "character": 56}, "end": {"line": 61, "character": 66}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 56, "result": {"contents": {"kind": "markdown", "value": "```python\njsonschema = json.load(f)\n```\n---\n**Full name:** `app.jsonschema`"}, "range": {"start": {"line": 61, "character": 56}, "end": {"line": 61, "character": 66}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 57, "result": {"contents": {"kind": "markdown", "value": "```python\njsonschema = json.load(f)\n```\n---\n**Full name:** `app.jsonschema`"}, "range": {"start": {"line": 61, "character": 56}, "end": {"line": 61, "character": 66}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 58, "result": [{"range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}}, {"range": {"start": {"line": 61, "character": 56}, "end": {"line": 61, "character": 66}}}, {"range": {"start": {"line": 67, "character": 56}, "end": {"line": 67, "character": 66}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 59, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 60, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 61, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 62, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 88}, "end": {"line": 61, "character": 89}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}, {"range": {"start": {"line": 62, "character": 0}, "end": {"line": 62, "character": 1}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 63, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 64, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 65, "result": [{"name": "subprocess", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 17}}, "selectionRange": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 17}}, "detail": "module subprocess", "children": []}, {"name": "json", "kind": 2, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 6, "character": 11}}, "selectionRange": {"start": {"line": 6, "character": 7}, "end": {"line": 6, "character": 11}}, "detail": "module json", "children": []}, {"name": "flask", "kind": 2, "range": {"start": {"line": 7, "character": 0}, "end": {"line": 7, "character": 12}}, "selectionRange": {"start": {"line": 7, "character": 7}, "end": {"line": 7, "character": 12}}, "detail": "module flask", "children": []}, {"name": "request", "kind": 13, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 18}, "end": {"line": 8, "character": 25}}, "detail": "instance request", "children": []}, {"name": "redirect", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 27}, "end": {"line": 8, "character": 35}}, "detail": "def redirect", "children": []}, {"name": "url_for", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 37}, "end": {"line": 8, "character": 44}}, "detail": "def url_for", "children": []}, {"name": "np", "kind": 2, "range": {"start": {"line": 9, "character": 0}, "end": {"line": 9, "character": 18}}, "selectionRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 18}}, "detail": "module np", "children": []}, {"name": "ReverseProxied", "kind": 5, "range": {"start": {"line": 11, "character": 0}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 11, "character": 6}, "end": {"line": 11, "character": 20}}, "detail": "class ReverseProxied", "children": [{"name": "__init__", "kind": 6, "range": {"start": {"line": 12, "character": 2}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 12, "character": 6}, "end": {"line": 12, "character": 14}}, "detail": "def __init__", "children": [{"name": "app", "kind": 7, "range": {"start": {"line": 13, "character": 6}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 13, "character": 11}, "end": {"line": 13, "character": 14}}, "detail": "self.app = app", "children": []}]}, {"name": "__call__", "kind": 6, "range": {"start": {"line": 14, "character": 2}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 14, "character": 6}, "end": {"line": 14, "character": 14}}, "detail": "def __call__", "children": []}]}, {"name": "app", "kind": 13, "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 27}}, "selectionRange": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 3}}, "detail": "app = flask.Flask(__name__)", "children": []}, {"name": "wsgi_app", "kind": 13, "range": {"start": {"line": 33, "character": 0}, "end": {"line": 33, "character": 43}}, "selectionRange": {"start": {"line": 33, "character": 4}, "end": {"line": 33, "character": 12}}, "detail": "app.wsgi_app = ReverseProxied(app.wsgi_app)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 41, "character": 0}, "end": {"line": 43, "character": 0}}, "selectionRange": {"start": {"line": 41, "character": 46}, "end": {"line": 41, "character": 47}}, "detail": "with open('forms/titles.schema.json', 'r') as f: jsonschema = json.load(f)", "children": []}, {"name": "jsonschema", "kind": 13, "range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 27}}, "selectionRange": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}, "detail": "jsonschema = json.load(f)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 47, "character": 0}}, "selectionRange": {"start": {"line": 45, "character": 57}, "end": {"line": 45, "character": 58}}, "detail": "with open('forms/titles-databook_Displays.json', 'r') as f: displays = json.load(f)", "children": []}, {"name": "displays", "kind": 13, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 25}}, "selectionRange": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}, "detail": "displays = json.load(f)", "children": []}, {"name": "index_page", "kind": 12, "range": {"start": {"line": 60, "character": 0}, "end": {"line": 62, "character": 1}}, "selectionRange": {"start": {"line": 60, "character": 4}, "end": {"line": 60, "character": 14}}, "detail": "def index_page", "children": []}, {"name": "display", "kind": 12, "range": {"start": {"line": 67, "character": 0}, "end": {"line": 68, "character": 80}}, "selectionRange": {"start": {"line": 67, "character": 4}, "end": {"line": 67, "character": 11}}, "detail": "def display", "children": []}, {"name": "redirect_test", "kind": 12, "range": {"start": {"line": 73, "character": 0}, "end": {"line": 74, "character": 44}}, "selectionRange": {"start": {"line": 73, "character": 4}, "end": {"line": 73, "character": 17}}, "detail": "def redirect_test", "children": []}, {"name": "another_page", "kind": 12, "range": {"start": {"line": 78, "character": 0}, "end": {"line": 81, "character": 12}}, "selectionRange": {"start": {"line": 78, "character": 4}, "end": {"line": 78, "character": 16}}, "detail": "def another_page", "children": []}, {"name": "random", "kind": 12, "range": {"start": {"line": 85, "character": 0}, "end": {"line": 87, "character": 35}}, "selectionRange": {"start": {"line": 85, "character": 4}, "end": {"line": 85, "character": 10}}, "detail": "def random", "children": []}, {"name": "submit", "kind": 12, "range": {"start": {"line": 92, "character": 0}, "end": {"line": 95, "character": 24}}, "selectionRange": {"start": {"line": 92, "character": 4}, "end": {"line": 92, "character": 10}}, "detail": "def submit", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 66, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 67, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 68, "result": [{"name": "subprocess", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 17}}, "selectionRange": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 17}}, "detail": "module subprocess", "children": []}, {"name": "json", "kind": 2, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 6, "character": 11}}, "selectionRange": {"start": {"line": 6, "character": 7}, "end": {"line": 6, "character": 11}}, "detail": "module json", "children": []}, {"name": "flask", "kind": 2, "range": {"start": {"line": 7, "character": 0}, "end": {"line": 7, "character": 12}}, "selectionRange": {"start": {"line": 7, "character": 7}, "end": {"line": 7, "character": 12}}, "detail": "module flask", "children": []}, {"name": "request", "kind": 13, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 18}, "end": {"line": 8, "character": 25}}, "detail": "instance request", "children": []}, {"name": "redirect", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 27}, "end": {"line": 8, "character": 35}}, "detail": "def redirect", "children": []}, {"name": "url_for", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 37}, "end": {"line": 8, "character": 44}}, "detail": "def url_for", "children": []}, {"name": "np", "kind": 2, "range": {"start": {"line": 9, "character": 0}, "end": {"line": 9, "character": 18}}, "selectionRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 18}}, "detail": "module np", "children": []}, {"name": "ReverseProxied", "kind": 5, "range": {"start": {"line": 11, "character": 0}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 11, "character": 6}, "end": {"line": 11, "character": 20}}, "detail": "class ReverseProxied", "children": [{"name": "__init__", "kind": 6, "range": {"start": {"line": 12, "character": 2}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 12, "character": 6}, "end": {"line": 12, "character": 14}}, "detail": "def __init__", "children": [{"name": "app", "kind": 7, "range": {"start": {"line": 13, "character": 6}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 13, "character": 11}, "end": {"line": 13, "character": 14}}, "detail": "self.app = app", "children": []}]}, {"name": "__call__", "kind": 6, "range": {"start": {"line": 14, "character": 2}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 14, "character": 6}, "end": {"line": 14, "character": 14}}, "detail": "def __call__", "children": []}]}, {"name": "app", "kind": 13, "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 27}}, "selectionRange": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 3}}, "detail": "app = flask.Flask(__name__)", "children": []}, {"name": "wsgi_app", "kind": 13, "range": {"start": {"line": 33, "character": 0}, "end": {"line": 33, "character": 43}}, "selectionRange": {"start": {"line": 33, "character": 4}, "end": {"line": 33, "character": 12}}, "detail": "app.wsgi_app = ReverseProxied(app.wsgi_app)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 41, "character": 0}, "end": {"line": 43, "character": 0}}, "selectionRange": {"start": {"line": 41, "character": 46}, "end": {"line": 41, "character": 47}}, "detail": "with open('forms/titles.schema.json', 'r') as f: jsonschema = json.load(f)", "children": []}, {"name": "jsonschema", "kind": 13, "range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 27}}, "selectionRange": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}, "detail": "jsonschema = json.load(f)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 47, "character": 0}}, "selectionRange": {"start": {"line": 45, "character": 57}, "end": {"line": 45, "character": 58}}, "detail": "with open('forms/titles-databook_Displays.json', 'r') as f: displays = json.load(f)", "children": []}, {"name": "displays", "kind": 13, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 25}}, "selectionRange": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}, "detail": "displays = json.load(f)", "children": []}, {"name": "index_page", "kind": 12, "range": {"start": {"line": 60, "character": 0}, "end": {"line": 61, "character": 69}}, "selectionRange": {"start": {"line": 60, "character": 4}, "end": {"line": 60, "character": 14}}, "detail": "def index_page", "children": []}, {"name": "display", "kind": 12, "range": {"start": {"line": 66, "character": 0}, "end": {"line": 67, "character": 80}}, "selectionRange": {"start": {"line": 66, "character": 4}, "end": {"line": 66, "character": 11}}, "detail": "def display", "children": []}, {"name": "redirect_test", "kind": 12, "range": {"start": {"line": 72, "character": 0}, "end": {"line": 73, "character": 44}}, "selectionRange": {"start": {"line": 72, "character": 4}, "end": {"line": 72, "character": 17}}, "detail": "def redirect_test", "children": []}, {"name": "another_page", "kind": 12, "range": {"start": {"line": 77, "character": 0}, "end": {"line": 80, "character": 12}}, "selectionRange": {"start": {"line": 77, "character": 4}, "end": {"line": 77, "character": 16}}, "detail": "def another_page", "children": []}, {"name": "random", "kind": 12, "range": {"start": {"line": 84, "character": 0}, "end": {"line": 86, "character": 35}}, "selectionRange": {"start": {"line": 84, "character": 4}, "end": {"line": 84, "character": 10}}, "detail": "def random", "children": []}, {"name": "submit", "kind": 12, "range": {"start": {"line": 91, "character": 0}, "end": {"line": 94, "character": 24}}, "selectionRange": {"start": {"line": 91, "character": 4}, "end": {"line": 91, "character": 10}}, "detail": "def submit", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 69}}, "message": "SyntaxError: positional argument follows keyword argument", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 69, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 70, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 70}}, "message": "SyntaxError: positional argument follows keyword argument", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 71, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 71}}, "message": "SyntaxError: positional argument follows keyword argument", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 72, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 72}}, "message": "SyntaxError: positional argument follows keyword argument", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 73}}, "message": "SyntaxError: positional argument follows keyword argument", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 73, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 74}}, "message": "SyntaxError: positional argument follows keyword argument", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 74, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 75}}, "message": "SyntaxError: positional argument follows keyword argument", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 75, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 76}}, "message": "SyntaxError: positional argument follows keyword argument", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 76, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 77, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": [{"range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 78}}, "message": "SyntaxError: invalid syntax", "severity": 1, "source": "jedi"}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 78, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 79, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 80, "result": {"isIncomplete": false, "items": [{"label": "delattr", "kind": 3, "sortText": "v0", "filterText": "delattr", "insertText": "delattr(${1:o}, ${2:name})$0", "insertTextFormat": 2}, {"label": "DeprecationWarning", "kind": 7, "sortText": "v1", "filterText": "DeprecationWarning", "insertText": "DeprecationWarning($0)", "insertTextFormat": 2}, {"label": "dict", "kind": 7, "sortText": "v2", "filterText": "dict", "insertText": "dict($0)", "insertTextFormat": 2}, {"label": "dir", "kind": 3, "sortText": "v3", "filterText": "dir", "insertText": "dir($0)", "insertTextFormat": 2}, {"label": "display", "kind": 3, "sortText": "v4", "filterText": "display", "insertText": "display(${1:tflid})$0", "insertTextFormat": 2}, {"label": "displays", "kind": 6, "sortText": "v5", "filterText": "displays", "insertText": "displays", "insertTextFormat": 1}, {"label": "divmod", "kind": 3, "sortText": "v6", "filterText": "divmod", "insertText": "divmod(${1:a}, ${2:b})$0", "insertTextFormat": 2}]}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 81, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 82, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 83, "result": {"label": "display", "kind": 3, "detail": "def display(tflid)", "documentation": {"kind": "markdown", "value": ""}, "sortText": "v4", "filterText": "display", "insertText": "display(${1:tflid})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 84, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 85, "result": {"label": "display", "kind": 3, "detail": "def display(tflid)", "documentation": {"kind": "markdown", "value": ""}, "sortText": "v4", "filterText": "display", "insertText": "display(${1:tflid})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 86, "result": {"label": "display", "kind": 3, "detail": "def display(tflid)", "documentation": {"kind": "markdown", "value": ""}, "sortText": "v4", "filterText": "display", "insertText": "display(${1:tflid})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 87, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 88, "result": {"label": "display", "kind": 3, "detail": "def display(tflid)", "documentation": {"kind": "markdown", "value": ""}, "sortText": "v4", "filterText": "display", "insertText": "display(${1:tflid})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 89, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 90, "result": {"label": "display", "kind": 3, "detail": "def display(tflid)", "documentation": {"kind": "markdown", "value": ""}, "sortText": "v4", "filterText": "display", "insertText": "display(${1:tflid})$0", "insertTextFormat": 2}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 91, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 92, "result": {"label": "displays", "kind": 6, "detail": "displays = json.load(f)", "documentation": {"kind": "markdown", "value": ""}, "sortText": "v5", "filterText": "displays", "insertText": "displays", "insertTextFormat": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 93, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 94, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 95, "result": [{"name": "subprocess", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 17}}, "selectionRange": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 17}}, "detail": "module subprocess", "children": []}, {"name": "json", "kind": 2, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 6, "character": 11}}, "selectionRange": {"start": {"line": 6, "character": 7}, "end": {"line": 6, "character": 11}}, "detail": "module json", "children": []}, {"name": "flask", "kind": 2, "range": {"start": {"line": 7, "character": 0}, "end": {"line": 7, "character": 12}}, "selectionRange": {"start": {"line": 7, "character": 7}, "end": {"line": 7, "character": 12}}, "detail": "module flask", "children": []}, {"name": "request", "kind": 13, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 18}, "end": {"line": 8, "character": 25}}, "detail": "instance request", "children": []}, {"name": "redirect", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 27}, "end": {"line": 8, "character": 35}}, "detail": "def redirect", "children": []}, {"name": "url_for", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 37}, "end": {"line": 8, "character": 44}}, "detail": "def url_for", "children": []}, {"name": "np", "kind": 2, "range": {"start": {"line": 9, "character": 0}, "end": {"line": 9, "character": 18}}, "selectionRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 18}}, "detail": "module np", "children": []}, {"name": "ReverseProxied", "kind": 5, "range": {"start": {"line": 11, "character": 0}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 11, "character": 6}, "end": {"line": 11, "character": 20}}, "detail": "class ReverseProxied", "children": [{"name": "__init__", "kind": 6, "range": {"start": {"line": 12, "character": 2}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 12, "character": 6}, "end": {"line": 12, "character": 14}}, "detail": "def __init__", "children": [{"name": "app", "kind": 7, "range": {"start": {"line": 13, "character": 6}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 13, "character": 11}, "end": {"line": 13, "character": 14}}, "detail": "self.app = app", "children": []}]}, {"name": "__call__", "kind": 6, "range": {"start": {"line": 14, "character": 2}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 14, "character": 6}, "end": {"line": 14, "character": 14}}, "detail": "def __call__", "children": []}]}, {"name": "app", "kind": 13, "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 27}}, "selectionRange": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 3}}, "detail": "app = flask.Flask(__name__)", "children": []}, {"name": "wsgi_app", "kind": 13, "range": {"start": {"line": 33, "character": 0}, "end": {"line": 33, "character": 43}}, "selectionRange": {"start": {"line": 33, "character": 4}, "end": {"line": 33, "character": 12}}, "detail": "app.wsgi_app = ReverseProxied(app.wsgi_app)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 41, "character": 0}, "end": {"line": 43, "character": 0}}, "selectionRange": {"start": {"line": 41, "character": 46}, "end": {"line": 41, "character": 47}}, "detail": "with open('forms/titles.schema.json', 'r') as f: jsonschema = json.load(f)", "children": []}, {"name": "jsonschema", "kind": 13, "range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 27}}, "selectionRange": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}, "detail": "jsonschema = json.load(f)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 47, "character": 0}}, "selectionRange": {"start": {"line": 45, "character": 57}, "end": {"line": 45, "character": 58}}, "detail": "with open('forms/titles-databook_Displays.json', 'r') as f: displays = json.load(f)", "children": []}, {"name": "displays", "kind": 13, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 25}}, "selectionRange": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}, "detail": "displays = json.load(f)", "children": []}, {"name": "index_page", "kind": 12, "range": {"start": {"line": 60, "character": 0}, "end": {"line": 61, "character": 86}}, "selectionRange": {"start": {"line": 60, "character": 4}, "end": {"line": 60, "character": 14}}, "detail": "def index_page", "children": []}, {"name": "display", "kind": 12, "range": {"start": {"line": 66, "character": 0}, "end": {"line": 67, "character": 80}}, "selectionRange": {"start": {"line": 66, "character": 4}, "end": {"line": 66, "character": 11}}, "detail": "def display", "children": []}, {"name": "redirect_test", "kind": 12, "range": {"start": {"line": 72, "character": 0}, "end": {"line": 73, "character": 44}}, "selectionRange": {"start": {"line": 72, "character": 4}, "end": {"line": 72, "character": 17}}, "detail": "def redirect_test", "children": []}, {"name": "another_page", "kind": 12, "range": {"start": {"line": 77, "character": 0}, "end": {"line": 80, "character": 12}}, "selectionRange": {"start": {"line": 77, "character": 4}, "end": {"line": 77, "character": 16}}, "detail": "def another_page", "children": []}, {"name": "random", "kind": 12, "range": {"start": {"line": 84, "character": 0}, "end": {"line": 86, "character": 35}}, "selectionRange": {"start": {"line": 84, "character": 4}, "end": {"line": 84, "character": 10}}, "detail": "def random", "children": []}, {"name": "submit", "kind": 12, "range": {"start": {"line": 91, "character": 0}, "end": {"line": 94, "character": 24}}, "selectionRange": {"start": {"line": 91, "character": 4}, "end": {"line": 91, "character": 10}}, "detail": "def submit", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 96, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 97, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 98, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 99, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 100, "result": {"contents": {"kind": "markdown", "value": "```python\njsonschema = json.load(f)\n```\n---\n**Full name:** `app.jsonschema`"}, "range": {"start": {"line": 61, "character": 56}, "end": {"line": 61, "character": 66}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 101, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 102, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword ,\n```\n---\nSequence Types \u2014 \"list\", \"tuple\", \"range\"\n*****************************************\n\nThere are three basic sequence types: lists, tuples, and range\nobjects. Additional sequence types tailored for processing of binary\ndata and text strings are described in dedicated sections.\n\n\nCommon Sequence Operations\n==========================\n\nThe operations in the following table are supported by most sequence\ntypes, both mutable and immutable. The \"collections.abc.Sequence\" ABC\nis provided to make it easier to correctly implement these operations\non custom sequence types.\n\nThis table lists the sequence operations sorted in ascending priority.\nIn the table, *s* and *t* are sequences of the same type, *n*, *i*,\n*j* and *k* are integers and *x* is an arbitrary object that meets any\ntype and value restrictions imposed by *s*.\n\nThe \"in\" and \"not in\" operations have the same priorities as the\ncomparison operations. The \"+\" (concatenation) and \"*\" (repetition)\noperations have the same priority as the corresponding numeric\noperations. [3]\n\n| Operation |            Result           | Notes |\n| --------- | --------------------------- | ----- |\n| \"x in s\"  | \"True\" if an item of *s* is | (1)   |\n|                            | equal to *x*, else \"False\"       |            |\n| \"x not in s\" | \"False\" if an item of *s* is | (1) |\n| ------------ | ---------------------------- | --- |\n|      \"s + t\"       | the concatenation of *s* and *t* | (6)(7) |\n| ------------------ | -------------------------------- | ------ |\n| \"s * n\" or \"n * s\" | equivalent to adding *s* to      | (2)(7) |\n|                            | itself *n* times                 |            |\n|   \"s[i]\"   | *i*th item of *s*, origin 0  |  (3)   |\n| ---------- | ---------------------------- | ------ |\n| \"s[i:j]\"   | slice of *s* from *i* to *j* | (3)(4) |\n| \"s[i:j:k]\" | slice of *s* from *i* to *j* | (3)(5) |\n|                            | with step *k*                    |            |\n|        \"len(s)\"        |          length of *s*           |     |\n| ---------------------- | -------------------------------- | --- |\n| \"min(s)\"               | smallest item of *s*             |     |\n| \"max(s)\"               | largest item of *s*              |     |\n| \"s.index(x[, i[, j]])\" | index of the first occurrence of | (8) |\n|                            | *x* in *s* (at or after index    |            |\n|                            | *i* and before index *j*)        |            |\n| \"s.count(x)\" | total number of occurrences of |  |\n| ------------ | ------------------------------ |  |\n|  |  |  |\n|  |  |  |\ntuples and lists are compared lexicographically by comparing\ncorresponding elements. This means that to compare equal, every\nelement must compare equal and the two sequences must be of the same\ntype and have the same length.  (For full details see Comparisons in\nthe language reference.)\n\nNotes:\n\n1. While the \"in\" and \"not in\" operations are used only for simple\n   containment testing in the general case, some specialised sequences\n   (such as \"str\", \"bytes\" and \"bytearray\") also use them for\n   subsequence testing:\n\n      >>> \"gg\" in \"eggs\"\n      True\n\n2. Values of *n* less than \"0\" are treated as \"0\" (which yields an\n   empty sequence of the same type as *s*).  Note that items in the\n   sequence *s* are not copied; they are referenced multiple times.\n   This often haunts new Python programmers; consider:\n\n      >>> lists = [[]] * 3\n      >>> lists\n      [[], [], []]\n      >>> lists[0].append(3)\n      >>> lists\n      [[3], [3], [3]]\n\n   What has happened is that \"[[]]\" is a one-element list containing\n   an empty list, so all three elements of \"[[]] * 3\" are references\n   to this single empty list.  Modifying any of the elements of\n   \"lists\" modifies this single list. You can create a list of\n   different lists this way:\n\n      >>> lists = [[] for i in range(3)]\n      >>> lists[0].append(3)\n      >>> lists[1].append(5)\n      >>> lists[2].append(7)\n      >>> lists\n      [[3], [5], [7]]\n\n   Further explanation is available in the FAQ entry How do I create a\n   multidimensional list?.\n\n3. If *i* or *j* is negative, the index is relative to the end of\n   sequence *s*: \"len(s) + i\" or \"len(s) + j\" is substituted.  But\n   note that \"-0\" is still \"0\".\n\n4. The slice of *s* from *i* to *j* is defined as the sequence of\n   items with index *k* such that \"i <= k < j\".  If *i* or *j* is\n   greater than \"len(s)\", use \"len(s)\".  If *i* is omitted or \"None\",\n   use \"0\".  If *j* is omitted or \"None\", use \"len(s)\".  If *i* is\n   greater than or equal to *j*, the slice is empty.\n\n5. The slice of *s* from *i* to *j* with step *k* is defined as the\n   sequence of items with index  \"x = i + n*k\" such that \"0 <= n <\n   (j-i)/k\".  In other words, the indices are \"i\", \"i+k\", \"i+2*k\",\n   \"i+3*k\" and so on, stopping when *j* is reached (but never\n   including *j*).  When *k* is positive, *i* and *j* are reduced to\n   \"len(s)\" if they are greater. When *k* is negative, *i* and *j* are\n   reduced to \"len(s) - 1\" if they are greater.  If *i* or *j* are\n   omitted or \"None\", they become \u201cend\u201d values (which end depends on\n   the sign of *k*).  Note, *k* cannot be zero. If *k* is \"None\", it\n   is treated like \"1\".\n\n6. Concatenating immutable sequences always results in a new object.\n   This means that building up a sequence by repeated concatenation\n   will have a quadratic runtime cost in the total sequence length.\n   To get a linear runtime cost, you must switch to one of the\n   alternatives below:\n\n   * if concatenating \"str\" objects, you can build a list and use\n     \"str.join()\" at the end or else write to an \"io.StringIO\"\n     instance and retrieve its value when complete\n\n   * if concatenating \"bytes\" objects, you can similarly use\n     \"bytes.join()\" or \"io.BytesIO\", or you can do in-place\n     concatenation with a \"bytearray\" object.  \"bytearray\" objects are\n     mutable and have an efficient overallocation mechanism\n\n   * if concatenating \"tuple\" objects, extend a \"list\" instead\n\n   * for other types, investigate the relevant class documentation\n\n7. Some sequence types (such as \"range\") only support item sequences\n   that follow specific patterns, and hence don\u2019t support sequence\n   concatenation or repetition.\n\n8. \"index\" raises \"ValueError\" when *x* is not found in *s*. Not all\n   implementations support passing the additional arguments *i* and\n   *j*. These arguments allow efficient searching of subsections of\n   the sequence. Passing the extra arguments is roughly equivalent to\n   using \"s[i:j].index(x)\", only without copying any data and with the\n   returned index being relative to the start of the sequence rather\n   than the start of the slice.\n\n\nImmutable Sequence Types\n========================\n\nThe only operation that immutable sequence types generally implement\nthat is not also implemented by mutable sequence types is support for\nthe \"hash()\" built-in.\n\nThis support allows immutable sequences, such as \"tuple\" instances, to\nbe used as \"dict\" keys and stored in \"set\" and \"frozenset\" instances.\n\nAttempting to hash an immutable sequence that contains unhashable\nvalues will result in \"TypeError\".\n\n\nMutable Sequence Types\n======================\n\nThe operations in the following table are defined on mutable sequence\ntypes. The \"collections.abc.MutableSequence\" ABC is provided to make\nit easier to correctly implement these operations on custom sequence\ntypes.\n\nIn the table *s* is an instance of a mutable sequence type, *t* is any\niterable object and *x* is an arbitrary object that meets any type and\nvalue restrictions imposed by *s* (for example, \"bytearray\" only\naccepts integers that meet the value restriction \"0 <= x <= 255\").\n\n| Operation  |             Result             | Notes |\n| ---------- | ------------------------------ | ----- |\n| \"s[i] = x\" | item *i* of *s* is replaced by |       |\n|                                | *x*                              |                       |\n|  \"s[i:j] = t\"  | slice of *s* from *i* to *j* is |     |\n| -------------- | ------------------------------- | --- |\n|                | iterable *t*                    |     |\n| \"del s[i:j]\"   | same as \"s[i:j] = []\"           |     |\n| \"s[i:j:k] = t\" | the elements of \"s[i:j:k]\" are  | (1) |\n|                                | replaced by those of *t*         |                       |\n| \"del s[i:j:k]\" | removes the elements of |  |\n| -------------- | ----------------------- |  |\n| \"s.append(x)\" |  appends *x* to the end of the   |     |\n| ------------- | -------------------------------- | --- |\n|               | \"s[len(s):len(s)] = [x]\")        |     |\n| \"s.clear()\"   | removes all items from *s* (same | (5) |\n|                                | as \"del s[:]\")                   |                       |\n| \"s.copy()\" | creates a shallow copy of *s* | (5) |\n| ---------- | ----------------------------- | --- |\n| \"s.extend(t)\" or \"s += t\" | extends *s* with the contents of |     |\n| ------------------------- | -------------------------------- | --- |\n|                           | as \"s[len(s):len(s)] = t\")       |     |\n| \"s *= n\"                  | updates *s* with its contents    | (6) |\n|                                | repeated *n* times               |                       |\n|     \"s.insert(i, x)\"    |  inserts *x* into *s* at the  |     |\n| ----------------------- | ----------------------------- | --- |\n|                         | \"s[i:i] = [x]\")               |     |\n| \"s.pop()\" or \"s.pop(i)\" | retrieves the item at *i* and | (2) |\n|                                | also removes it from *s*         |                       |\n| \"s.remove(x)\" | remove the first item from *s* | (3) |\n| ------------- | ------------------------------ | --- |\n| \"s.reverse()\" | reverses the items of *s* in | (4) |\n| ------------- | ---------------------------- | --- |\n|  |  |  |\n|  |  |  |\n```python\nrange(0, 20, 2)\n```\n\n1. *t* must have the same length as the slice it is replacing.\n\n2. The optional argument *i* defaults to \"-1\", so that by default the\n   last item is removed and returned.\n\n3. \"remove()\" raises \"ValueError\" when *x* is not found in *s*.\n\n4. The \"reverse()\" method modifies the sequence in place for economy\n   of space when reversing a large sequence.  To remind users that it\n   operates by side effect, it does not return the reversed sequence.\n\n5. \"clear()\" and \"copy()\" are included for consistency with the\n   interfaces of mutable containers that don\u2019t support slicing\n   operations (such as \"dict\" and \"set\"). \"copy()\" is not part of the\n   \"collections.abc.MutableSequence\" ABC, but most concrete mutable\n   sequence classes provide it.\n\n   New in version 3.3: \"clear()\" and \"copy()\" methods.\n\n6. The value *n* is an integer, or an object implementing\n   \"\\_\\_index\\_\\_()\".  Zero and negative values of *n* clear the sequence.\n   Items in the sequence are not copied; they are referenced multiple\n   times, as explained for \"s * n\" under Common Sequence Operations.\n\n\nLists\n=====\n\nLists are mutable sequences, typically used to store collections of\nhomogeneous items (where the precise degree of similarity will vary by\napplication).\n\nclass list([iterable])\n\n   Lists may be constructed in several ways:\n\n   * Using a pair of square brackets to denote the empty list: \"[]\"\n\n   * Using square brackets, separating items with commas: \"[a]\", \"[a,\n     b, c]\"\n\n   * Using a list comprehension: \"[x for x in iterable]\"\n\n   * Using the type constructor: \"list()\" or \"list(iterable)\"\n\n   The constructor builds a list whose items are the same and in the\n   same order as *iterable*\u2019s items.  *iterable* may be either a\n   sequence, a container that supports iteration, or an iterator\n   object.  If *iterable* is already a list, a copy is made and\n   returned, similar to \"iterable[:]\". For example, \"list('abc')\"\n   returns \"['a', 'b', 'c']\" and \"list( (1, 2, 3) )\" returns \"[1, 2,\n   3]\". If no argument is given, the constructor creates a new empty\n   list, \"[]\".\n\n   Many other operations also produce lists, including the \"sorted()\"\n   built-in.\n\n   Lists implement all of the common and mutable sequence operations.\n   Lists also provide the following additional method:\n\n   sort(*, key=None, reverse=False)\n\n      This method sorts the list in place, using only \"<\" comparisons\n      between items. Exceptions are not suppressed - if any comparison\n      operations fail, the entire sort operation will fail (and the\n      list will likely be left in a partially modified state).\n\n      \"sort()\" accepts two arguments that can only be passed by\n      keyword (keyword-only arguments):\n\n      *key* specifies a function of one argument that is used to\n      extract a comparison key from each list element (for example,\n      \"key=str.lower\"). The key corresponding to each item in the list\n      is calculated once and then used for the entire sorting process.\n      The default value of \"None\" means that list items are sorted\n      directly without calculating a separate key value.\n\n      The \"functools.cmp_to_key()\" utility is available to convert a\n      2.x style *cmp* function to a *key* function.\n\n      *reverse* is a boolean value.  If set to \"True\", then the list\n      elements are sorted as if each comparison were reversed.\n\n      This method modifies the sequence in place for economy of space\n      when sorting a large sequence.  To remind users that it operates\n      by side effect, it does not return the sorted sequence (use\n      \"sorted()\" to explicitly request a new sorted list instance).\n\n      The \"sort()\" method is guaranteed to be stable.  A sort is\n      stable if it guarantees not to change the relative order of\n      elements that compare equal \u2014 this is helpful for sorting in\n      multiple passes (for example, sort by department, then by salary\n      grade).\n\n      For sorting examples and a brief sorting tutorial, see Sorting\n      HOW TO.\n\n      **CPython implementation detail:** While a list is being sorted,\n      the effect of attempting to mutate, or even inspect, the list is\n      undefined.  The C implementation of Python makes the list appear\n      empty for the duration, and raises \"ValueError\" if it can detect\n      that the list has been mutated during a sort.\n\n\nTuples\n======\n\nTuples are immutable sequences, typically used to store collections of\nheterogeneous data (such as the 2-tuples produced by the \"enumerate()\"\nbuilt-in). Tuples are also used for cases where an immutable sequence\nof homogeneous data is needed (such as allowing storage in a \"set\" or\n\"dict\" instance).\n\nclass tuple([iterable])\n\n   Tuples may be constructed in a number of ways:\n\n   * Using a pair of parentheses to denote the empty tuple: \"()\"\n\n   * Using a trailing comma for a singleton tuple: \"a,\" or \"(a,)\"\n\n   * Separating items with commas: \"a, b, c\" or \"(a, b, c)\"\n\n   * Using the \"tuple()\" built-in: \"tuple()\" or \"tuple(iterable)\"\n\n   The constructor builds a tuple whose items are the same and in the\n   same order as *iterable*\u2019s items.  *iterable* may be either a\n   sequence, a container that supports iteration, or an iterator\n   object.  If *iterable* is already a tuple, it is returned\n   unchanged. For example, \"tuple('abc')\" returns \"('a', 'b', 'c')\"\n   and \"tuple( [1, 2, 3] )\" returns \"(1, 2, 3)\". If no argument is\n   given, the constructor creates a new empty tuple, \"()\".\n\n   Note that it is actually the comma which makes a tuple, not the\n   parentheses. The parentheses are optional, except in the empty\n   tuple case, or when they are needed to avoid syntactic ambiguity.\n   For example, \"f(a, b, c)\" is a function call with three arguments,\n   while \"f((a, b, c))\" is a function call with a 3-tuple as the sole\n   argument.\n\n   Tuples implement all of the common sequence operations.\n\nFor heterogeneous collections of data where access by name is clearer\nthan access by index, \"collections.namedtuple()\" may be a more\nappropriate choice than a simple tuple object.\n\n\nRanges\n======\n\nThe \"range\" type represents an immutable sequence of numbers and is\ncommonly used for looping a specific number of times in \"for\" loops.\n\nclass range(stop)\nclass range(start, stop[, step])\n\n   The arguments to the range constructor must be integers (either\n   built-in \"int\" or any object that implements the \"\\_\\_index\\_\\_\"\n   special method).  If the *step* argument is omitted, it defaults to\n   \"1\". If the *start* argument is omitted, it defaults to \"0\". If\n   *step* is zero, \"ValueError\" is raised.\n\n   For a positive *step*, the contents of a range \"r\" are determined\n   by the formula \"r[i] = start + step*i\" where \"i >= 0\" and \"r[i] <\n   stop\".\n\n   For a negative *step*, the contents of the range are still\n   determined by the formula \"r[i] = start + step*i\", but the\n   constraints are \"i >= 0\" and \"r[i] > stop\".\n\n   A range object will be empty if \"r[0]\" does not meet the value\n   constraint. Ranges do support negative indices, but these are\n   interpreted as indexing from the end of the sequence determined by\n   the positive indices.\n\n   Ranges containing absolute values larger than \"sys.maxsize\" are\n   permitted but some features (such as \"len()\") may raise\n   \"OverflowError\".\n\n   Range examples:\n\n      >>> list(range(10))\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n      >>> list(range(1, 11))\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n      >>> list(range(0, 30, 5))\n      [0, 5, 10, 15, 20, 25]\n      >>> list(range(0, 10, 3))\n      [0, 3, 6, 9]\n      >>> list(range(0, -10, -1))\n      [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n      >>> list(range(0))\n      []\n      >>> list(range(1, 0))\n      []\n\n   Ranges implement all of the common sequence operations except\n   concatenation and repetition (due to the fact that range objects\n   can only represent sequences that follow a strict pattern and\n   repetition and concatenation will usually violate that pattern).\n\n   start\n\n      The value of the *start* parameter (or \"0\" if the parameter was\n      not supplied)\n\n   stop\n\n      The value of the *stop* parameter\n\n   step\n\n      The value of the *step* parameter (or \"1\" if the parameter was\n      not supplied)\n\nThe advantage of the \"range\" type over a regular \"list\" or \"tuple\" is\nthat a \"range\" object will always take the same (small) amount of\nmemory, no matter the size of the range it represents (as it only\nstores the \"start\", \"stop\" and \"step\" values, calculating individual\nitems and subranges as needed).\n\nRange objects implement the \"collections.abc.Sequence\" ABC, and\nprovide features such as containment tests, element index lookup,\nslicing and support for negative indices (see Sequence Types \u2014 list,\ntuple, range):\n\n```python\nr = range(0, 20, 2)\nr\n11 in r\n```\n\n```\nFalse\n```\n\n```python\n10 in r\n```\n\n```\nTrue\n```\n\n```python\nr.index(10)\n```\n\n```\n5\n```\n\n```python\nr[5]\n```\n\n```\n10\n```\n\n```python\nrange(0, 10, 2)\n```\n```python\nr[:5]\nr[-1]\n```\n\n```\n18\n```\n\n\nTesting range objects for equality with \"==\" and \"!=\" compares them as\nsequences.  That is, two range objects are considered equal if they\nrepresent the same sequence of values.  (Note that two range objects\nthat compare equal might have different \"start\", \"stop\" and \"step\"\nattributes, for example \"range(0) == range(2, 1, 3)\" or \"range(0, 3,\n2) == range(0, 4, 2)\".)\n\nChanged in version 3.2: Implement the Sequence ABC. Support slicing\nand negative indices. Test \"int\" objects for membership in constant\ntime instead of iterating through all items.\n\nChanged in version 3.3: Define \u2018==\u2019 and \u2018!=\u2019 to compare range objects\nbased on the sequence of values they define (instead of comparing\nbased on object identity).\n\nNew in version 3.3: The \"start\", \"stop\" and \"step\" attributes.\n\nSee also:\n\n  * The linspace recipe shows how to implement a lazy version of range\n    suitable for floating point applications."}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 103, "result": {"contents": {"kind": "markdown", "value": "```python\njsonschema = json.load(f)\n```\n---\n**Full name:** `app.jsonschema`"}, "range": {"start": {"line": 61, "character": 56}, "end": {"line": 61, "character": 66}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 104, "result": {"contents": {"kind": "markdown", "value": "```python\njsonschema = json.load(f)\n```\n---\n**Full name:** `app.jsonschema`"}, "range": {"start": {"line": 61, "character": 56}, "end": {"line": 61, "character": 66}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 105, "result": {"contents": {"kind": "markdown", "value": "```python\njsonschema = json.load(f)\n```\n---\n**Full name:** `app.jsonschema`"}, "range": {"start": {"line": 61, "character": 56}, "end": {"line": 61, "character": 66}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 106, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 107, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 108, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 109, "result": [{"range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}}, {"range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 110, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 111, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 112, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 113, "result": {"contents": {"kind": "markdown", "value": "```python\ninstance Response(environ: \"WSGIEnvironment\", start_response: \"StartResponse\") -> t.Iterable[bytes]\n```\n---\nRepresents an outgoing WSGI HTTP response with body, status, and\nheaders. Has properties and methods for using the functionality\ndefined by various HTTP specs.\n\nThe response body is flexible to support different use cases. The\nsimple form is passing bytes, or a string which will be encoded as\nUTF-8. Passing an iterable of bytes or strings makes this a\nstreaming response. A generator is particularly useful for building\na CSV file in memory or using SSE (Server Sent Events). A file-like\nobject is also iterable, although the\n`~werkzeug.utils.send_file` helper should be used in that\ncase.\n\nThe response object is itself a WSGI application callable. When\ncalled (`\\_\\_call\\_\\_`) with ``environ`` and ``start_response``,\nit will pass its status and headers to ``start_response`` then\nreturn its body as an iterable.\n\n```python\nfrom werkzeug.wrappers.response import Response\n\ndef index():\n    return Response(\"Hello, World!\")\n\ndef application(environ, start_response):\n    path = environ.get(\"PATH_INFO\") or \"/\"\n\n    if path == \"/\":\n        response = index()\n    else:\n        response = Response(\"Not Found\", status=404)\n\n    return response(environ, start_response)\n```\n\n- `response`: The data for the body of the response. A string or\n    bytes, or tuple or list of strings or bytes, for a fixed-length\n    response, or any other iterable of strings or bytes for a\n    streaming response. Defaults to an empty body.\n- `status`: The status code for the response. Either an int, in\n    which case the default status message is added, or a string in\n    the form ``{code} {message}``, like ``404 Not Found``. Defaults\n    to 200.\n- `headers`: A `~werkzeug.datastructures.Headers` object,\n    or a list of ``(key, value)`` tuples that will be converted to a\n    ``Headers`` object.\n- `mimetype`: The mime type (content type without charset or\n    other parameters) of the response. If the value starts with\n    ``text/`` (or matches some other special cases), the charset\n    will be added to create the ``content_type``.\n- `content_type`: The full content type of the response.\n    Overrides building the value from ``mimetype``.\n- `direct_passthrough`: Pass the response body directly through\n    as the WSGI iterable. This can be used when the body is a binary\n    file or other iterator of bytes, to skip some unnecessary\n    checks. Use `~werkzeug.utils.send_file` instead of setting\n    this manually.\n\n*Changed in 2.0*\n    Combine ``BaseResponse`` and mixins into a single ``Response``\n    class. Using the old classes is deprecated and will be removed\n    in Werkzeug 2.1.\n\n*Changed in 0.5*\n    The ``direct_passthrough`` parameter was added.\n**Full name:** `werkzeug.wrappers.response.Response`"}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 114, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 115, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 116, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 117, "result": {"contents": {"kind": "markdown", "value": "```python\nparam tflid\n```"}, "range": {"start": {"line": 67, "character": 74}, "end": {"line": 67, "character": 79}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 118, "result": [{"range": {"start": {"line": 66, "character": 12}, "end": {"line": 66, "character": 17}}}, {"range": {"start": {"line": 67, "character": 74}, "end": {"line": 67, "character": 79}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 119, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 120, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 121, "result": {"signatures": [{"label": "def render_template(template_name_or_list: Union[Text, Iterable[Text]], **context: Any) -> Text", "documentation": {"kind": "markdown", "value": "```text\nRenders a template from the template folder with the given\ncontext.\n\n:param template_name_or_list: the name of the template to be\n                              rendered, or an iterable with template names\n                              the first one existing will be rendered\n:param context: the variables that should be available in the\n                context of the template.\n```"}, "parameters": [{"label": "template_name_or_list: Union[Text, Iterable[Text]]"}, {"label": "**context: Any"}]}], "activeSignature": 0, "activeParameter": 1}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 122, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 123, "result": [{"name": "subprocess", "kind": 2, "range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 17}}, "selectionRange": {"start": {"line": 0, "character": 7}, "end": {"line": 0, "character": 17}}, "detail": "module subprocess", "children": []}, {"name": "json", "kind": 2, "range": {"start": {"line": 6, "character": 0}, "end": {"line": 6, "character": 11}}, "selectionRange": {"start": {"line": 6, "character": 7}, "end": {"line": 6, "character": 11}}, "detail": "module json", "children": []}, {"name": "flask", "kind": 2, "range": {"start": {"line": 7, "character": 0}, "end": {"line": 7, "character": 12}}, "selectionRange": {"start": {"line": 7, "character": 7}, "end": {"line": 7, "character": 12}}, "detail": "module flask", "children": []}, {"name": "request", "kind": 13, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 18}, "end": {"line": 8, "character": 25}}, "detail": "instance request", "children": []}, {"name": "redirect", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 27}, "end": {"line": 8, "character": 35}}, "detail": "def redirect", "children": []}, {"name": "url_for", "kind": 12, "range": {"start": {"line": 8, "character": 0}, "end": {"line": 8, "character": 44}}, "selectionRange": {"start": {"line": 8, "character": 37}, "end": {"line": 8, "character": 44}}, "detail": "def url_for", "children": []}, {"name": "np", "kind": 2, "range": {"start": {"line": 9, "character": 0}, "end": {"line": 9, "character": 18}}, "selectionRange": {"start": {"line": 9, "character": 16}, "end": {"line": 9, "character": 18}}, "detail": "module np", "children": []}, {"name": "ReverseProxied", "kind": 5, "range": {"start": {"line": 11, "character": 0}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 11, "character": 6}, "end": {"line": 11, "character": 20}}, "detail": "class ReverseProxied", "children": [{"name": "__init__", "kind": 6, "range": {"start": {"line": 12, "character": 2}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 12, "character": 6}, "end": {"line": 12, "character": 14}}, "detail": "def __init__", "children": [{"name": "app", "kind": 7, "range": {"start": {"line": 13, "character": 6}, "end": {"line": 13, "character": 20}}, "selectionRange": {"start": {"line": 13, "character": 11}, "end": {"line": 13, "character": 14}}, "detail": "self.app = app", "children": []}]}, {"name": "__call__", "kind": 6, "range": {"start": {"line": 14, "character": 2}, "end": {"line": 30, "character": 46}}, "selectionRange": {"start": {"line": 14, "character": 6}, "end": {"line": 14, "character": 14}}, "detail": "def __call__", "children": []}]}, {"name": "app", "kind": 13, "range": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 27}}, "selectionRange": {"start": {"line": 32, "character": 0}, "end": {"line": 32, "character": 3}}, "detail": "app = flask.Flask(__name__)", "children": []}, {"name": "wsgi_app", "kind": 13, "range": {"start": {"line": 33, "character": 0}, "end": {"line": 33, "character": 43}}, "selectionRange": {"start": {"line": 33, "character": 4}, "end": {"line": 33, "character": 12}}, "detail": "app.wsgi_app = ReverseProxied(app.wsgi_app)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 41, "character": 0}, "end": {"line": 43, "character": 0}}, "selectionRange": {"start": {"line": 41, "character": 46}, "end": {"line": 41, "character": 47}}, "detail": "with open('forms/titles.schema.json', 'r') as f: jsonschema = json.load(f)", "children": []}, {"name": "jsonschema", "kind": 13, "range": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 27}}, "selectionRange": {"start": {"line": 42, "character": 2}, "end": {"line": 42, "character": 12}}, "detail": "jsonschema = json.load(f)", "children": []}, {"name": "f", "kind": 13, "range": {"start": {"line": 45, "character": 0}, "end": {"line": 47, "character": 0}}, "selectionRange": {"start": {"line": 45, "character": 57}, "end": {"line": 45, "character": 58}}, "detail": "with open('forms/titles-databook_Displays.json', 'r') as f: displays = json.load(f)", "children": []}, {"name": "displays", "kind": 13, "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 25}}, "selectionRange": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}, "detail": "displays = json.load(f)", "children": []}, {"name": "index_page", "kind": 12, "range": {"start": {"line": 60, "character": 0}, "end": {"line": 61, "character": 86}}, "selectionRange": {"start": {"line": 60, "character": 4}, "end": {"line": 60, "character": 14}}, "detail": "def index_page", "children": []}, {"name": "display", "kind": 12, "range": {"start": {"line": 66, "character": 0}, "end": {"line": 67, "character": 82}}, "selectionRange": {"start": {"line": 66, "character": 4}, "end": {"line": 66, "character": 11}}, "detail": "def display", "children": []}, {"name": "redirect_test", "kind": 12, "range": {"start": {"line": 72, "character": 0}, "end": {"line": 73, "character": 44}}, "selectionRange": {"start": {"line": 72, "character": 4}, "end": {"line": 72, "character": 17}}, "detail": "def redirect_test", "children": []}, {"name": "another_page", "kind": 12, "range": {"start": {"line": 77, "character": 0}, "end": {"line": 80, "character": 12}}, "selectionRange": {"start": {"line": 77, "character": 4}, "end": {"line": 77, "character": 16}}, "detail": "def another_page", "children": []}, {"name": "random", "kind": 12, "range": {"start": {"line": 84, "character": 0}, "end": {"line": 86, "character": 35}}, "selectionRange": {"start": {"line": 84, "character": 4}, "end": {"line": 84, "character": 10}}, "detail": "def random", "children": []}, {"name": "submit", "kind": 12, "range": {"start": {"line": 91, "character": 0}, "end": {"line": 94, "character": 24}}, "selectionRange": {"start": {"line": 91, "character": 4}, "end": {"line": 91, "character": 10}}, "detail": "def submit", "children": []}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 124, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 125, "result": {"contents": {"kind": "markdown", "value": "```python\nkeyword ,\n```\n---\nSequence Types \u2014 \"list\", \"tuple\", \"range\"\n*****************************************\n\nThere are three basic sequence types: lists, tuples, and range\nobjects. Additional sequence types tailored for processing of binary\ndata and text strings are described in dedicated sections.\n\n\nCommon Sequence Operations\n==========================\n\nThe operations in the following table are supported by most sequence\ntypes, both mutable and immutable. The \"collections.abc.Sequence\" ABC\nis provided to make it easier to correctly implement these operations\non custom sequence types.\n\nThis table lists the sequence operations sorted in ascending priority.\nIn the table, *s* and *t* are sequences of the same type, *n*, *i*,\n*j* and *k* are integers and *x* is an arbitrary object that meets any\ntype and value restrictions imposed by *s*.\n\nThe \"in\" and \"not in\" operations have the same priorities as the\ncomparison operations. The \"+\" (concatenation) and \"*\" (repetition)\noperations have the same priority as the corresponding numeric\noperations. [3]\n\n| Operation |            Result           | Notes |\n| --------- | --------------------------- | ----- |\n| \"x in s\"  | \"True\" if an item of *s* is | (1)   |\n|                            | equal to *x*, else \"False\"       |            |\n| \"x not in s\" | \"False\" if an item of *s* is | (1) |\n| ------------ | ---------------------------- | --- |\n|      \"s + t\"       | the concatenation of *s* and *t* | (6)(7) |\n| ------------------ | -------------------------------- | ------ |\n| \"s * n\" or \"n * s\" | equivalent to adding *s* to      | (2)(7) |\n|                            | itself *n* times                 |            |\n|   \"s[i]\"   | *i*th item of *s*, origin 0  |  (3)   |\n| ---------- | ---------------------------- | ------ |\n| \"s[i:j]\"   | slice of *s* from *i* to *j* | (3)(4) |\n| \"s[i:j:k]\" | slice of *s* from *i* to *j* | (3)(5) |\n|                            | with step *k*                    |            |\n|        \"len(s)\"        |          length of *s*           |     |\n| ---------------------- | -------------------------------- | --- |\n| \"min(s)\"               | smallest item of *s*             |     |\n| \"max(s)\"               | largest item of *s*              |     |\n| \"s.index(x[, i[, j]])\" | index of the first occurrence of | (8) |\n|                            | *x* in *s* (at or after index    |            |\n|                            | *i* and before index *j*)        |            |\n| \"s.count(x)\" | total number of occurrences of |  |\n| ------------ | ------------------------------ |  |\n|  |  |  |\n|  |  |  |\ntuples and lists are compared lexicographically by comparing\ncorresponding elements. This means that to compare equal, every\nelement must compare equal and the two sequences must be of the same\ntype and have the same length.  (For full details see Comparisons in\nthe language reference.)\n\nNotes:\n\n1. While the \"in\" and \"not in\" operations are used only for simple\n   containment testing in the general case, some specialised sequences\n   (such as \"str\", \"bytes\" and \"bytearray\") also use them for\n   subsequence testing:\n\n      >>> \"gg\" in \"eggs\"\n      True\n\n2. Values of *n* less than \"0\" are treated as \"0\" (which yields an\n   empty sequence of the same type as *s*).  Note that items in the\n   sequence *s* are not copied; they are referenced multiple times.\n   This often haunts new Python programmers; consider:\n\n      >>> lists = [[]] * 3\n      >>> lists\n      [[], [], []]\n      >>> lists[0].append(3)\n      >>> lists\n      [[3], [3], [3]]\n\n   What has happened is that \"[[]]\" is a one-element list containing\n   an empty list, so all three elements of \"[[]] * 3\" are references\n   to this single empty list.  Modifying any of the elements of\n   \"lists\" modifies this single list. You can create a list of\n   different lists this way:\n\n      >>> lists = [[] for i in range(3)]\n      >>> lists[0].append(3)\n      >>> lists[1].append(5)\n      >>> lists[2].append(7)\n      >>> lists\n      [[3], [5], [7]]\n\n   Further explanation is available in the FAQ entry How do I create a\n   multidimensional list?.\n\n3. If *i* or *j* is negative, the index is relative to the end of\n   sequence *s*: \"len(s) + i\" or \"len(s) + j\" is substituted.  But\n   note that \"-0\" is still \"0\".\n\n4. The slice of *s* from *i* to *j* is defined as the sequence of\n   items with index *k* such that \"i <= k < j\".  If *i* or *j* is\n   greater than \"len(s)\", use \"len(s)\".  If *i* is omitted or \"None\",\n   use \"0\".  If *j* is omitted or \"None\", use \"len(s)\".  If *i* is\n   greater than or equal to *j*, the slice is empty.\n\n5. The slice of *s* from *i* to *j* with step *k* is defined as the\n   sequence of items with index  \"x = i + n*k\" such that \"0 <= n <\n   (j-i)/k\".  In other words, the indices are \"i\", \"i+k\", \"i+2*k\",\n   \"i+3*k\" and so on, stopping when *j* is reached (but never\n   including *j*).  When *k* is positive, *i* and *j* are reduced to\n   \"len(s)\" if they are greater. When *k* is negative, *i* and *j* are\n   reduced to \"len(s) - 1\" if they are greater.  If *i* or *j* are\n   omitted or \"None\", they become \u201cend\u201d values (which end depends on\n   the sign of *k*).  Note, *k* cannot be zero. If *k* is \"None\", it\n   is treated like \"1\".\n\n6. Concatenating immutable sequences always results in a new object.\n   This means that building up a sequence by repeated concatenation\n   will have a quadratic runtime cost in the total sequence length.\n   To get a linear runtime cost, you must switch to one of the\n   alternatives below:\n\n   * if concatenating \"str\" objects, you can build a list and use\n     \"str.join()\" at the end or else write to an \"io.StringIO\"\n     instance and retrieve its value when complete\n\n   * if concatenating \"bytes\" objects, you can similarly use\n     \"bytes.join()\" or \"io.BytesIO\", or you can do in-place\n     concatenation with a \"bytearray\" object.  \"bytearray\" objects are\n     mutable and have an efficient overallocation mechanism\n\n   * if concatenating \"tuple\" objects, extend a \"list\" instead\n\n   * for other types, investigate the relevant class documentation\n\n7. Some sequence types (such as \"range\") only support item sequences\n   that follow specific patterns, and hence don\u2019t support sequence\n   concatenation or repetition.\n\n8. \"index\" raises \"ValueError\" when *x* is not found in *s*. Not all\n   implementations support passing the additional arguments *i* and\n   *j*. These arguments allow efficient searching of subsections of\n   the sequence. Passing the extra arguments is roughly equivalent to\n   using \"s[i:j].index(x)\", only without copying any data and with the\n   returned index being relative to the start of the sequence rather\n   than the start of the slice.\n\n\nImmutable Sequence Types\n========================\n\nThe only operation that immutable sequence types generally implement\nthat is not also implemented by mutable sequence types is support for\nthe \"hash()\" built-in.\n\nThis support allows immutable sequences, such as \"tuple\" instances, to\nbe used as \"dict\" keys and stored in \"set\" and \"frozenset\" instances.\n\nAttempting to hash an immutable sequence that contains unhashable\nvalues will result in \"TypeError\".\n\n\nMutable Sequence Types\n======================\n\nThe operations in the following table are defined on mutable sequence\ntypes. The \"collections.abc.MutableSequence\" ABC is provided to make\nit easier to correctly implement these operations on custom sequence\ntypes.\n\nIn the table *s* is an instance of a mutable sequence type, *t* is any\niterable object and *x* is an arbitrary object that meets any type and\nvalue restrictions imposed by *s* (for example, \"bytearray\" only\naccepts integers that meet the value restriction \"0 <= x <= 255\").\n\n| Operation  |             Result             | Notes |\n| ---------- | ------------------------------ | ----- |\n| \"s[i] = x\" | item *i* of *s* is replaced by |       |\n|                                | *x*                              |                       |\n|  \"s[i:j] = t\"  | slice of *s* from *i* to *j* is |     |\n| -------------- | ------------------------------- | --- |\n|                | iterable *t*                    |     |\n| \"del s[i:j]\"   | same as \"s[i:j] = []\"           |     |\n| \"s[i:j:k] = t\" | the elements of \"s[i:j:k]\" are  | (1) |\n|                                | replaced by those of *t*         |                       |\n| \"del s[i:j:k]\" | removes the elements of |  |\n| -------------- | ----------------------- |  |\n| \"s.append(x)\" |  appends *x* to the end of the   |     |\n| ------------- | -------------------------------- | --- |\n|               | \"s[len(s):len(s)] = [x]\")        |     |\n| \"s.clear()\"   | removes all items from *s* (same | (5) |\n|                                | as \"del s[:]\")                   |                       |\n| \"s.copy()\" | creates a shallow copy of *s* | (5) |\n| ---------- | ----------------------------- | --- |\n| \"s.extend(t)\" or \"s += t\" | extends *s* with the contents of |     |\n| ------------------------- | -------------------------------- | --- |\n|                           | as \"s[len(s):len(s)] = t\")       |     |\n| \"s *= n\"                  | updates *s* with its contents    | (6) |\n|                                | repeated *n* times               |                       |\n|     \"s.insert(i, x)\"    |  inserts *x* into *s* at the  |     |\n| ----------------------- | ----------------------------- | --- |\n|                         | \"s[i:i] = [x]\")               |     |\n| \"s.pop()\" or \"s.pop(i)\" | retrieves the item at *i* and | (2) |\n|                                | also removes it from *s*         |                       |\n| \"s.remove(x)\" | remove the first item from *s* | (3) |\n| ------------- | ------------------------------ | --- |\n| \"s.reverse()\" | reverses the items of *s* in | (4) |\n| ------------- | ---------------------------- | --- |\n|  |  |  |\n|  |  |  |\n```python\nrange(0, 20, 2)\n```\n\n1. *t* must have the same length as the slice it is replacing.\n\n2. The optional argument *i* defaults to \"-1\", so that by default the\n   last item is removed and returned.\n\n3. \"remove()\" raises \"ValueError\" when *x* is not found in *s*.\n\n4. The \"reverse()\" method modifies the sequence in place for economy\n   of space when reversing a large sequence.  To remind users that it\n   operates by side effect, it does not return the reversed sequence.\n\n5. \"clear()\" and \"copy()\" are included for consistency with the\n   interfaces of mutable containers that don\u2019t support slicing\n   operations (such as \"dict\" and \"set\"). \"copy()\" is not part of the\n   \"collections.abc.MutableSequence\" ABC, but most concrete mutable\n   sequence classes provide it.\n\n   New in version 3.3: \"clear()\" and \"copy()\" methods.\n\n6. The value *n* is an integer, or an object implementing\n   \"\\_\\_index\\_\\_()\".  Zero and negative values of *n* clear the sequence.\n   Items in the sequence are not copied; they are referenced multiple\n   times, as explained for \"s * n\" under Common Sequence Operations.\n\n\nLists\n=====\n\nLists are mutable sequences, typically used to store collections of\nhomogeneous items (where the precise degree of similarity will vary by\napplication).\n\nclass list([iterable])\n\n   Lists may be constructed in several ways:\n\n   * Using a pair of square brackets to denote the empty list: \"[]\"\n\n   * Using square brackets, separating items with commas: \"[a]\", \"[a,\n     b, c]\"\n\n   * Using a list comprehension: \"[x for x in iterable]\"\n\n   * Using the type constructor: \"list()\" or \"list(iterable)\"\n\n   The constructor builds a list whose items are the same and in the\n   same order as *iterable*\u2019s items.  *iterable* may be either a\n   sequence, a container that supports iteration, or an iterator\n   object.  If *iterable* is already a list, a copy is made and\n   returned, similar to \"iterable[:]\". For example, \"list('abc')\"\n   returns \"['a', 'b', 'c']\" and \"list( (1, 2, 3) )\" returns \"[1, 2,\n   3]\". If no argument is given, the constructor creates a new empty\n   list, \"[]\".\n\n   Many other operations also produce lists, including the \"sorted()\"\n   built-in.\n\n   Lists implement all of the common and mutable sequence operations.\n   Lists also provide the following additional method:\n\n   sort(*, key=None, reverse=False)\n\n      This method sorts the list in place, using only \"<\" comparisons\n      between items. Exceptions are not suppressed - if any comparison\n      operations fail, the entire sort operation will fail (and the\n      list will likely be left in a partially modified state).\n\n      \"sort()\" accepts two arguments that can only be passed by\n      keyword (keyword-only arguments):\n\n      *key* specifies a function of one argument that is used to\n      extract a comparison key from each list element (for example,\n      \"key=str.lower\"). The key corresponding to each item in the list\n      is calculated once and then used for the entire sorting process.\n      The default value of \"None\" means that list items are sorted\n      directly without calculating a separate key value.\n\n      The \"functools.cmp_to_key()\" utility is available to convert a\n      2.x style *cmp* function to a *key* function.\n\n      *reverse* is a boolean value.  If set to \"True\", then the list\n      elements are sorted as if each comparison were reversed.\n\n      This method modifies the sequence in place for economy of space\n      when sorting a large sequence.  To remind users that it operates\n      by side effect, it does not return the sorted sequence (use\n      \"sorted()\" to explicitly request a new sorted list instance).\n\n      The \"sort()\" method is guaranteed to be stable.  A sort is\n      stable if it guarantees not to change the relative order of\n      elements that compare equal \u2014 this is helpful for sorting in\n      multiple passes (for example, sort by department, then by salary\n      grade).\n\n      For sorting examples and a brief sorting tutorial, see Sorting\n      HOW TO.\n\n      **CPython implementation detail:** While a list is being sorted,\n      the effect of attempting to mutate, or even inspect, the list is\n      undefined.  The C implementation of Python makes the list appear\n      empty for the duration, and raises \"ValueError\" if it can detect\n      that the list has been mutated during a sort.\n\n\nTuples\n======\n\nTuples are immutable sequences, typically used to store collections of\nheterogeneous data (such as the 2-tuples produced by the \"enumerate()\"\nbuilt-in). Tuples are also used for cases where an immutable sequence\nof homogeneous data is needed (such as allowing storage in a \"set\" or\n\"dict\" instance).\n\nclass tuple([iterable])\n\n   Tuples may be constructed in a number of ways:\n\n   * Using a pair of parentheses to denote the empty tuple: \"()\"\n\n   * Using a trailing comma for a singleton tuple: \"a,\" or \"(a,)\"\n\n   * Separating items with commas: \"a, b, c\" or \"(a, b, c)\"\n\n   * Using the \"tuple()\" built-in: \"tuple()\" or \"tuple(iterable)\"\n\n   The constructor builds a tuple whose items are the same and in the\n   same order as *iterable*\u2019s items.  *iterable* may be either a\n   sequence, a container that supports iteration, or an iterator\n   object.  If *iterable* is already a tuple, it is returned\n   unchanged. For example, \"tuple('abc')\" returns \"('a', 'b', 'c')\"\n   and \"tuple( [1, 2, 3] )\" returns \"(1, 2, 3)\". If no argument is\n   given, the constructor creates a new empty tuple, \"()\".\n\n   Note that it is actually the comma which makes a tuple, not the\n   parentheses. The parentheses are optional, except in the empty\n   tuple case, or when they are needed to avoid syntactic ambiguity.\n   For example, \"f(a, b, c)\" is a function call with three arguments,\n   while \"f((a, b, c))\" is a function call with a 3-tuple as the sole\n   argument.\n\n   Tuples implement all of the common sequence operations.\n\nFor heterogeneous collections of data where access by name is clearer\nthan access by index, \"collections.namedtuple()\" may be a more\nappropriate choice than a simple tuple object.\n\n\nRanges\n======\n\nThe \"range\" type represents an immutable sequence of numbers and is\ncommonly used for looping a specific number of times in \"for\" loops.\n\nclass range(stop)\nclass range(start, stop[, step])\n\n   The arguments to the range constructor must be integers (either\n   built-in \"int\" or any object that implements the \"\\_\\_index\\_\\_\"\n   special method).  If the *step* argument is omitted, it defaults to\n   \"1\". If the *start* argument is omitted, it defaults to \"0\". If\n   *step* is zero, \"ValueError\" is raised.\n\n   For a positive *step*, the contents of a range \"r\" are determined\n   by the formula \"r[i] = start + step*i\" where \"i >= 0\" and \"r[i] <\n   stop\".\n\n   For a negative *step*, the contents of the range are still\n   determined by the formula \"r[i] = start + step*i\", but the\n   constraints are \"i >= 0\" and \"r[i] > stop\".\n\n   A range object will be empty if \"r[0]\" does not meet the value\n   constraint. Ranges do support negative indices, but these are\n   interpreted as indexing from the end of the sequence determined by\n   the positive indices.\n\n   Ranges containing absolute values larger than \"sys.maxsize\" are\n   permitted but some features (such as \"len()\") may raise\n   \"OverflowError\".\n\n   Range examples:\n\n      >>> list(range(10))\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n      >>> list(range(1, 11))\n      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n      >>> list(range(0, 30, 5))\n      [0, 5, 10, 15, 20, 25]\n      >>> list(range(0, 10, 3))\n      [0, 3, 6, 9]\n      >>> list(range(0, -10, -1))\n      [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n      >>> list(range(0))\n      []\n      >>> list(range(1, 0))\n      []\n\n   Ranges implement all of the common sequence operations except\n   concatenation and repetition (due to the fact that range objects\n   can only represent sequences that follow a strict pattern and\n   repetition and concatenation will usually violate that pattern).\n\n   start\n\n      The value of the *start* parameter (or \"0\" if the parameter was\n      not supplied)\n\n   stop\n\n      The value of the *stop* parameter\n\n   step\n\n      The value of the *step* parameter (or \"1\" if the parameter was\n      not supplied)\n\nThe advantage of the \"range\" type over a regular \"list\" or \"tuple\" is\nthat a \"range\" object will always take the same (small) amount of\nmemory, no matter the size of the range it represents (as it only\nstores the \"start\", \"stop\" and \"step\" values, calculating individual\nitems and subranges as needed).\n\nRange objects implement the \"collections.abc.Sequence\" ABC, and\nprovide features such as containment tests, element index lookup,\nslicing and support for negative indices (see Sequence Types \u2014 list,\ntuple, range):\n\n```python\nr = range(0, 20, 2)\nr\n11 in r\n```\n\n```\nFalse\n```\n\n```python\n10 in r\n```\n\n```\nTrue\n```\n\n```python\nr.index(10)\n```\n\n```\n5\n```\n\n```python\nr[5]\n```\n\n```\n10\n```\n\n```python\nrange(0, 10, 2)\n```\n```python\nr[:5]\nr[-1]\n```\n\n```\n18\n```\n\n\nTesting range objects for equality with \"==\" and \"!=\" compares them as\nsequences.  That is, two range objects are considered equal if they\nrepresent the same sequence of values.  (Note that two range objects\nthat compare equal might have different \"start\", \"stop\" and \"step\"\nattributes, for example \"range(0) == range(2, 1, 3)\" or \"range(0, 3,\n2) == range(0, 4, 2)\".)\n\nChanged in version 3.2: Implement the Sequence ABC. Support slicing\nand negative indices. Test \"int\" objects for membership in constant\ntime instead of iterating through all items.\n\nChanged in version 3.3: Define \u2018==\u2019 and \u2018!=\u2019 to compare range objects\nbased on the sequence of values they define (instead of comparing\nbased on object identity).\n\nNew in version 3.3: The \"start\", \"stop\" and \"step\" attributes.\n\nSee also:\n\n  * The linspace recipe shows how to implement a lazy version of range\n    suitable for floating point applications."}, "range": null}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 126, "result": [{"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 76}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 127, "result": [{"title": "Extract expression into variable 'jls_extract_var'", "kind": "refactor.extract", "edit": {"documentChanges": [{"textDocument": {"uri": "file:///mnt/code/app.py", "version": 26}, "edits": [{"range": {"start": {"line": 61, "character": 2}, "end": {"line": 61, "character": 2}}, "newText": "jls_extract_var = displays\n  "}, {"range": {"start": {"line": 61, "character": 68}, "end": {"line": 61, "character": 76}}, "newText": "jls_extract_var"}]}]}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 128, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 129, "result": null}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 130, "result": {"contents": {"kind": "markdown", "value": "```python\ndisplays = json.load(f)\n```\n---\n**Full name:** `app.displays`"}, "range": {"start": {"line": 61, "character": 77}, "end": {"line": 61, "character": 85}}}}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "id": 131, "result": [{"uri": "file:///mnt/code/app.py", "range": {"start": {"line": 46, "character": 2}, "end": {"line": 46, "character": 10}}}]}
INFO:pygls.protocol:Sending data: {"jsonrpc": "2.0", "method": "textDocument/publishDiagnostics", "params": {"uri": "file:///mnt/code/app.py", "diagnostics": []}}
